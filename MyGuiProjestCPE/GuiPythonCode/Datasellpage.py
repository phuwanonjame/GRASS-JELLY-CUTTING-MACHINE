# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Watcharanon Kerdkaew\PycharmProjects\MyGuiProjestCPE\DesignGui\Datasellpage.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
#---------------------- Connection Database Mysql ---------------------------#
from typing import Union

import mysql.connector
cnx = mysql.connector.connect(host="localhost", user="root1", password="123456789", database="wprojectcpe62")       # connect to MySql database
cur = cnx.cursor()
#----------------------------------------------------------------------------#

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QTableWidget, QTableWidgetItem, QVBoxLayout, QLabel, QDialogButtonBox, QComboBox, QWidget
from PyQt5.QtCore import *
import datetime as dt
import xlsxwriter
import pandas as pd

#Variable
Owner_N=[[]]
Table = ""
Data_page = ""
Date_dmy = ""
Time_hms = ""
resultDatasell = []
Search_N = ""

class Ui_DatasellPage(object):
    def setupUi(self, DatasellPage):
        global Table,Data_page
        DatasellPage.setObjectName("DatasellPage")
        DatasellPage.resize(1280, 800)
        DatasellPage.showFullScreen()
        DatasellPage.setFocusPolicy(QtCore.Qt.ClickFocus)
        DatasellPage.setStyleSheet("#DatasellPage{background-color: rgb(178, 201, 255);}")
        self.centralwidget = QtWidgets.QWidget(DatasellPage)
        self.centralwidget.setObjectName("centralwidget")
        self.tableDatasell_data = QtWidgets.QTableWidget(self.centralwidget)
        self.tableDatasell_data.setGeometry(QtCore.QRect(20, 180, 1241, 521))
        Table = self
        Data_page = DatasellPage
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(14)
        self.tableDatasell_data.setFont(font)
        self.tableDatasell_data.setFocusPolicy(QtCore.Qt.NoFocus)
        self.tableDatasell_data.setAutoScrollMargin(16)
        self.tableDatasell_data.setObjectName("tableDatasell_data")
        self.tableDatasell_data.setColumnCount(7)
        self.tableDatasell_data.setRowCount(1)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableDatasell_data.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableDatasell_data.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableDatasell_data.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableDatasell_data.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableDatasell_data.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableDatasell_data.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableDatasell_data.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableDatasell_data.setHorizontalHeaderItem(6, item)
        self.tableDatasell_data.horizontalHeader().setDefaultSectionSize(170)
        self.tableDatasell_data.horizontalHeader().setMinimumSectionSize(30)
        self.tableDatasell_data.horizontalHeader().setStretchLastSection(True)
        self.tableDatasell_data.verticalHeader().setDefaultSectionSize(45)
        self.tableDatasell_data.verticalHeader().setMinimumSectionSize(40)
        self.label_Data = QtWidgets.QLabel(self.centralwidget)
        self.label_Data.setGeometry(QtCore.QRect(20, 700, 871, 70))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.label_Data.setFont(font)
        self.label_Data.setStyleSheet("#label_Data{background-color: rgb(255, 255, 255);border: 1px solid rgb(122, 122, 122);}")
        self.label_Data.setFrameShadow(QtWidgets.QFrame.Plain)
        self.label_Data.setLineWidth(1)
        self.label_Data.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Data.setObjectName("label_Data")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 0, 1281, 80))
        self.frame.setStyleSheet("background-color: rgb(254, 255, 178);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.label_NameSaveData = QtWidgets.QLabel(self.frame)
        self.label_NameSaveData.setGeometry(QtCore.QRect(230, 0, 791, 81))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.label_NameSaveData.setFont(font)
        self.label_NameSaveData.setAlignment(QtCore.Qt.AlignCenter)
        self.label_NameSaveData.setObjectName("label_NameSaveData")
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setGeometry(QtCore.QRect(20, 90, 1241, 81))
        self.frame_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.pushButton_Export = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_Export.setGeometry(QtCore.QRect(1080, 20, 70, 40))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Export.setFont(font)
        self.pushButton_Export.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_Export.setStyleSheet("background-color: rgb(37, 84, 255);")
        self.pushButton_Export.setObjectName("pushButton_Export")
        self.pushButton_Exit_Datasell = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_Exit_Datasell.setGeometry(QtCore.QRect(1160, 20, 70, 41))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Exit_Datasell.setFont(font)
        self.pushButton_Exit_Datasell.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_Exit_Datasell.setStyleSheet("background-color: rgb(255, 51, 51);")
        self.pushButton_Exit_Datasell.setObjectName("pushButton_Exit_Datasell")
        self.label_Search = QtWidgets.QLabel(self.frame_2)
        self.label_Search.setGeometry(QtCore.QRect(0, 20, 70, 40))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.label_Search.setFont(font)
        self.label_Search.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Search.setObjectName("label_Search")
        self.pushButton_Refresh = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_Refresh.setGeometry(QtCore.QRect(1000, 20, 70, 40))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Refresh.setFont(font)
        self.pushButton_Refresh.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_Refresh.setStyleSheet("background-color: rgb(153, 255, 255)")
        self.pushButton_Refresh.setObjectName("pushButton_Refresh")

        self.pushButton_Time = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_Time.setGeometry(QtCore.QRect(920, 20, 70, 40))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Time.setFont(font)
        self.pushButton_Time.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_Time.setStyleSheet("background-color: rgb(153, 255, 255)")
        self.pushButton_Time.setObjectName("pushButton_Time")

        self.pushButton_Date = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_Date.setGeometry(QtCore.QRect(840, 20, 70, 40))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Date.setFont(font)
        self.pushButton_Date.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_Date.setStyleSheet("background-color: rgb(153, 255, 255)")
        self.pushButton_Date.setObjectName("pushButton_Date")

        self.lineEdit_Search = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_Search.setGeometry(QtCore.QRect(60, 20, 690, 40))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(14)
        self.lineEdit_Search.setFont(font)
        self.lineEdit_Search.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.lineEdit_Search.setObjectName("lineEdit_Search")

        self.pushButton_Search = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_Search.setGeometry(QtCore.QRect(760, 20, 70, 40))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Search.setFont(font)
        self.pushButton_Search.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_Search.setStyleSheet("background-color: rgb(170, 85, 255);")
        self.pushButton_Search.setObjectName("pushButton_Search")

        self.label_AllPrice = QtWidgets.QLabel(self.centralwidget)
        self.label_AllPrice.setGeometry(QtCore.QRect(1060, 700, 201, 70))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_AllPrice.setFont(font)
        self.label_AllPrice.setStyleSheet("background-color: rgb(255, 255, 255);border: 1px solid rgb(122, 122, 122);")
        self.label_AllPrice.setFrameShadow(QtWidgets.QFrame.Plain)
        self.label_AllPrice.setLineWidth(1)
        self.label_AllPrice.setText("")
        self.label_AllPrice.setAlignment(QtCore.Qt.AlignCenter)
        self.label_AllPrice.setObjectName("label_AllPrice")

        self.label_AllWeight = QtWidgets.QLabel(self.centralwidget)
        self.label_AllWeight.setGeometry(QtCore.QRect(890, 700, 171, 70))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_AllWeight.setFont(font)
        self.label_AllWeight.setStyleSheet("background-color: rgb(255, 255, 255);border: 1px solid rgb(122, 122, 122);")
        self.label_AllWeight.setFrameShadow(QtWidgets.QFrame.Plain)
        self.label_AllWeight.setLineWidth(1)
        self.label_AllWeight.setText("")
        self.label_AllWeight.setAlignment(QtCore.Qt.AlignCenter)
        self.label_AllWeight.setObjectName("label_AllWeight")

        DatasellPage.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(DatasellPage)
        self.statusbar.setObjectName("statusbar")
        DatasellPage.setStatusBar(self.statusbar)

        # Select all Row
        self.tableDatasell_data.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)

        self.retranslateUi(DatasellPage)
        QtCore.QMetaObject.connectSlotsByName(DatasellPage)

    def retranslateUi(self, DatasellPage):
        _translate = QtCore.QCoreApplication.translate
        DatasellPage.setWindowTitle(_translate("DatasellPage", "DatasellPage"))
        item = self.tableDatasell_data.verticalHeaderItem(0)
        item.setText(_translate("DatasellPage", "1"))
        item = self.tableDatasell_data.horizontalHeaderItem(0)
        item.setText(_translate("DatasellPage", "วัน/เดือน/ปี"))
        item = self.tableDatasell_data.horizontalHeaderItem(1)
        item.setText(_translate("DatasellPage", "เวลา"))
        item = self.tableDatasell_data.horizontalHeaderItem(2)
        item.setText(_translate("DatasellPage", "ชื่อ"))
        item = self.tableDatasell_data.horizontalHeaderItem(3)
        item.setText(_translate("DatasellPage", "นามสกุล"))
        item = self.tableDatasell_data.horizontalHeaderItem(4)
        item.setText(_translate("DatasellPage", "แบบพิมพ์"))
        item = self.tableDatasell_data.horizontalHeaderItem(5)
        item.setText(_translate("DatasellPage", "น้ำหนัก กก."))
        item = self.tableDatasell_data.horizontalHeaderItem(6)
        item.setText(_translate("DatasellPage", "ราคา"))
        self.label_Data.setText(_translate("DatasellPage", "รวมน้ำหนักและราคาเฉาก๊วยที่ขาย"))
        self.label_NameSaveData.setText(_translate("DatasellPage", "รายงานบันทึกน้ำหนักเฉาก๊วยที่ขาย"))
        self.pushButton_Export.setText(_translate("DatasellPage", "ส่งออก"))
        self.pushButton_Exit_Datasell.setText(_translate("DatasellPage", "ออก"))
        self.label_Search.setText(_translate("DatasellPage", "ค้นหา"))
        self.pushButton_Refresh.setText(_translate("DatasellPage", "รีเฟรช"))
        self.pushButton_Time.setText(_translate("DatasellPage", "เวลา"))
        self.pushButton_Date.setText(_translate("DatasellPage", "วันเดือนปี"))
        self.pushButton_Search.setText(_translate("DatasellPage", "ค้นหา"))


        # Action Code
        # *-------ปุ่มปิดหน้า-------* #
        self.pushButton_Exit_Datasell.clicked.connect(lambda :self.ExitDatasellpage(DatasellPage))

        # *-------โหลดTable--------* #
        self.LoadDataTable()

        # *----ปุ่มการทำงาน--------* #
        self.pushButton_Search.clicked.connect(self.Searchbtn)
        self.pushButton_Date.clicked.connect(self.Datebtn)
        self.pushButton_Time.clicked.connect(self.Timebtn)
        self.pushButton_Refresh.clicked.connect(self.Refreshbtn)
        self.pushButton_Export.clicked.connect(self.Exportbtn)

    def LoadDataTable(self):    #โหลดหน้าต่างรายการขาย
        cnx.connect()
        cur.execute("SELECT Date, Time, Username, Lastname, Model, Weight, Price FROM datasellpage ")
        # -------------------- Load Data raw Material *----------------#
        result = cur.fetchall()
        self.tableDatasell_data.setRowCount(0)
        # self.tb_raw_material.setColumnCount(6)
        Owner_N.clear()
        for row_number, row_data in enumerate(result):
            print(row_number)
            self.tableDatasell_data.insertRow(row_number)

            for column_number, data in enumerate(row_data):
                print(column_number)

                item = QtWidgets.QTableWidgetItem(str(data))
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                self.tableDatasell_data.setItem(row_number, column_number, item)
                Owner_N.append([])
                Owner_N[row_number].append(str(data))
                print(Owner_N[row_number])
        # -----------------------------------------------#

        print("resuslt = ",result,"\nlen(result)=",len(result))
        # ----------------label Weight-------------------#
        Weight_sum = 0
        for w in range (len(result)):
            Weight_N = result[w][5]
            Model_N = result[w][4]
            print("\nWeight = ",Weight_N)
            # --------- แยกน้ำหนัก Square Wavy ---------------#
            SquareW = "0"
            WavyW = "0"
            if Model_N == "Square":
                SquareW = Weight_N
                print("Model = ", Model_N)
            elif Model_N == "Wavy":
                WavyW = Weight_N
                print("Model = ", Model_N)
            else:
                print(len(Weight_N))
                for r in range(len(Weight_N)):
                    if r < Weight_N.find('/'):
                        SquareW = SquareW + Weight_N[r]
                    elif r > Weight_N.find('/'):
                        WavyW = WavyW + Weight_N[r]
                print("r = ", r, "Square = ", int(SquareW), "Wavy = ", int(WavyW))
             # ----------------------------------------------#
            Weight_sum = Weight_sum + int(SquareW)+int(WavyW)
            print("Square = ", int(SquareW), "Wavy = ", int(WavyW))
        print("Weight_S = ", Weight_sum)
        self.label_AllWeight.setText(str(Weight_sum))
        # -----------------------------------------------#

        # ----------------label Price--------------------#
        Price_sum = 0
        for p in range (len(result)):
            #print("Price row = ",result[p][6])
            Price_sum = Price_sum + int(result[p][6])
            #print("Price_sum = ",Price_sum,"\n")
        self.label_AllPrice.setText(str(Price_sum))
        # -----------------------------------------------#

    def ExitDatasellpage(self, DatasellPage):   #ออกจากหน้าต่างรายการขาย
        DatasellPage.close()

    def Searchbtn(self):    #ค้นหา  *แก้ไข*
        global resultDatasell,Search_N
        Texts = str(self.lineEdit_Search.text())
        cnx.connect()
        cur.execute("SELECT * FROM datasellpage ")
        rowtable = cur.fetchall()
        if rowtable != []:
            if Texts != "":
                cur.execute(
                    "SELECT Date, Time, Username, Lastname, Model, Weight, Price FROM datasellpage WHERE "
                    "Date='%s' OR Time='%s' OR Username='%s' OR Lastname='%s' OR Model='%s' OR Weight='%s' OR Price='%s'"
                    %(Texts, Texts, Texts, Texts, Texts, Texts, Texts))
                # -------------------- Load Data raw Material *----------------#
                resultDatasell = cur.fetchall()
                self.tableDatasell_data.setRowCount(0)
                # self.tb_raw_material.setColumnCount(6)
                Owner_N.clear()
                for row_number, row_data in enumerate(resultDatasell):
                    print(row_number)
                    self.tableDatasell_data.insertRow(row_number)

                    for column_number, data in enumerate(row_data):
                        print(column_number)

                        item = QtWidgets.QTableWidgetItem(str(data))
                        item.setTextAlignment(QtCore.Qt.AlignCenter)
                        self.tableDatasell_data.setItem(row_number, column_number, item)

                        Owner_N.append([])
                        Owner_N[row_number].append(str(data))
                        print(Owner_N[row_number])
                # -----------------------------------------------#

                print("result = ", resultDatasell, "\nlen(result)=", len(resultDatasell))
                # ----------------label Weight-------------------#
                Weight_sum = 0
                for w in range(len(resultDatasell)):
                    Weight_N = resultDatasell[w][5]
                    Model_N = resultDatasell[w][4]
                    print("\nWeight = ", Weight_N)
                    # --------- แยกน้ำหนัก Square Wavy ---------------#
                    SquareW = "0"
                    WavyW = "0"
                    if Model_N == "Square":
                        SquareW = Weight_N
                        print("Model = ", Model_N)
                    elif Model_N == "Wavy":
                        WavyW = Weight_N
                        print("Model = ", Model_N)
                    else:
                        print(len(Weight_N))
                        for r in range(len(Weight_N)):
                            if r < Weight_N.find('/'):
                                SquareW = SquareW + Weight_N[r]
                            elif r > Weight_N.find('/'):
                                WavyW = WavyW + Weight_N[r]
                        print("r = ", r, "Square = ", int(SquareW), "Wavy = ", int(WavyW))
                    # ----------------------------------------------#
                    Weight_sum = Weight_sum + int(SquareW) + int(WavyW)
                    print("Square = ", int(SquareW), "Wavy = ", int(WavyW))
                print("Weight_Sum = ", Weight_sum)
                self.label_AllWeight.setText(str(Weight_sum))
                # -----------------------------------------------#

                # ----------------label Price--------------------#
                Price_sum = 0
                for p in range(len(resultDatasell)):
                    # print("Price row = ",result[p][6])
                    Price_sum = Price_sum + int(resultDatasell[p][6])
                    # print("Price_sum = ",Price_sum,"\n")
                self.label_AllPrice.setText(str(Price_sum))
                # -----------------------------------------------#
                Search_N = "1"
            else:
                msgBox = QtWidgets.QMessageBox()
                msgBox.setWindowTitle("Error")
                msgBox.setText("กรุณากรอกข้อมูลก่อนกดค้นหา")
                msgBox.exec_()
        else:
            msgBox = QtWidgets.QMessageBox()
            msgBox.setWindowTitle("Search Error")
            msgBox.setText("ไม่สามารถค้นหาข้อมูลได้เนื่องจากไม่มีข้อมูล")
            msgBox.exec_()

    def Refreshbtn(self):   #รีเฟรช
        global Search_N
        Search_N = ""
        Ui_DatasellPage.LoadDataTable(Table)
        self.lineEdit_Search.clear()

    def Exportbtn(self):    #ส่งออกข้อมูลเป็น Excel สกุลไฟล์.xlsx
        global resultDatasell, Search_N
        Id_User = []
        Date_User = []
        Time_User = []
        Name_User = []
        Last_User = []
        Model_User = []
        Weight_User = []
        Price_User = []
        Weight_All = [str(self.label_AllWeight.text())]
        Price_All = [str(self.label_AllPrice.text())]
        print(Weight_All, Price_All)
        cur.execute("SELECT * FROM datasellpage ")
        rowtable = cur.fetchall()
        if rowtable != []:
            if Search_N == "1":
                # -----------------------------------------Excel Pandas-------------------------------------#
                if resultDatasell != []:
                    row1 = resultDatasell[0]
                    print(row1)
                    resultDTPage = []
                    for n in range (len(resultDatasell)):
                        cur.execute("SELECT * FROM datasellpage WHERE Date='%s' AND Time='%s' AND Username='%s' AND Lastname='%s' AND Model='%s' AND Weight='%s' AND Price='%s'"
                                    % (resultDatasell[n][0],resultDatasell[n][1],resultDatasell[n][2],resultDatasell[n][3],resultDatasell[n][4],resultDatasell[n][5],resultDatasell[n][6]))
                        resultDTPage = resultDTPage + cur.fetchall()

                    print("resultDatasell:   ",resultDatasell,"\n resultDTPage:",resultDTPage)

                    for r1 in range(len(resultDTPage)):
                        print("round = ", r1)
                        for r2 in range(len(resultDTPage[r1])):
                            if r2 == 0:
                                Id_User.append(resultDTPage[r1][r2])
                            elif r2 == 1:
                                Date_User.append(resultDTPage[r1][r2])
                            elif r2 == 2:
                                Time_User.append(resultDTPage[r1][r2])
                            elif r2 == 3:
                                Name_User.append(resultDTPage[r1][r2])
                            elif r2 == 4:
                                Last_User.append(resultDTPage[r1][r2])
                            elif r2 == 5:
                                Model_User.append(resultDTPage[r1][r2])
                            elif r2 == 6:
                                Weight_User.append(resultDTPage[r1][r2])
                            elif r2 == 7:
                                Price_User.append(resultDTPage[r1][r2])

                    # สร้าง DataFrame ที่มี 1 คอลัมน์ชื่อ 'Data'
                    dataframe = pd.DataFrame({'ID': Id_User,
                                              'Date': Date_User,
                                              'Time': Time_User,
                                              'Username': Name_User,
                                              'Lastname': Last_User,
                                              'Model': Model_User,
                                              'Weight': Weight_User,
                                              'Price': Price_User})

                    dataframe_All = pd.DataFrame({'All Weight': Weight_All,
                                                 'All Price': Price_All})
                    # สร้าง Pandas Excel Writer เพื่อใช้เขียนไฟล์ Excel โดยใช้ Engine เป็น xlsxwriter
                    # โดยตั้งชื่อไฟล์ว่า 'simple_data.xlsx'
                    dt_N = dt.datetime.now()
                    Date_N = str(dt_N.strftime("%d%m%y"))
                    Time_N = str(dt_N.strftime("%H%M%S"))
                    fileName = "/home/pi/Desktop/New folder/MyGuiProjestCPE/Export"
                    writer = pd.ExcelWriter(fileName + 'simple_data_DataSellpage.xlsx', engine='xlsxwriter')

                    # นำข้อมูลที่สร้างไว้ในตัวแปร dataframe เขียนลงไฟล์ ||+Date_N+'_'+Time_N+
                    dataframe.to_excel(writer)
                    dataframe_All.to_excel(writer, startcol=15, startrow=2)
                    # จบการทำงาน Pandas Excel writer และเซฟข้อมูลออกมาเป็นไฟล์ Excel
                    writer.save()

                    msgBox = QtWidgets.QMessageBox()
                    msgBox.setWindowTitle("Export")
                    msgBox.setText("ส่งออกข้อมูลสำเร็จ")
                    msgBox.exec_()
                    # ------------------------------------------------------------------------------------------#
                else:
                    msgBox = QtWidgets.QMessageBox()
                    msgBox.setWindowTitle("Export")
                    msgBox.setText("ไม่มีข้อมูลให้ทำการส่งออก")
                    msgBox.exec_()
            else:
                # -----------------------------------------Excel Pandas-------------------------------------#
                cur.execute("SELECT * FROM datasellpage ")
                rowtable = cur.fetchall()
                row1 = rowtable[0]
                print(row1)

                for r1 in range(len(rowtable)):
                    print("round = ", r1)
                    for r2 in range(len(rowtable[r1])):
                        if r2 == 0:
                            Id_User.append(rowtable[r1][r2])
                        elif r2 == 1:
                            Date_User.append(rowtable[r1][r2])
                        elif r2 == 2:
                            Time_User.append(rowtable[r1][r2])
                        elif r2 == 3:
                            Name_User.append(rowtable[r1][r2])
                        elif r2 == 4:
                            Last_User.append(rowtable[r1][r2])
                        elif r2 == 5:
                            Model_User.append(rowtable[r1][r2])
                        elif r2 == 6:
                            Weight_User.append(rowtable[r1][r2])
                        elif r2 == 7:
                            Price_User.append(rowtable[r1][r2])

                # สร้าง DataFrame ที่มี 1 คอลัมน์ชื่อ 'Data'
                dataframe = pd.DataFrame({'ID': Id_User,
                                          'Date': Date_User,
                                          'Time': Time_User,
                                          'Username': Name_User,
                                          'Lastname': Last_User,
                                          'Model': Model_User,
                                          'Weight': Weight_User,
                                          'Price': Price_User})
                dataframe_All = pd.DataFrame({'All Weight': Weight_All,
                                             'All Price': Price_All})
                # สร้าง Pandas Excel Writer เพื่อใช้เขียนไฟล์ Excel โดยใช้ Engine เป็น xlsxwriter
                # โดยตั้งชื่อไฟล์ว่า 'simple_data.xlsx'
                dt_N = dt.datetime.now()
                Date_N = str(dt_N.strftime("%d%m%y"))
                Time_N = str(dt_N.strftime("%H%M%S"))
                fileName = "/home/pi/Desktop/New folder/MyGuiProjestCPE/Export"
                writer = pd.ExcelWriter(fileName + 'simple_data_DataSellpage.xlsx', engine='xlsxwriter')

                # นำข้อมูลที่สร้างไว้ในตัวแปร dataframe เขียนลงไฟล์ ||+Date_N+'_'+Time_N+
                dataframe.to_excel(writer)
                dataframe_All.to_excel(writer, startcol=15, startrow=2)

                # จบการทำงาน Pandas Excel writer และเซฟข้อมูลออกมาเป็นไฟล์ Excel
                writer.save()
                msgBox = QtWidgets.QMessageBox()
                msgBox.setWindowTitle("Export")
                msgBox.setText("ส่งออกข้อมูลสำเร็จ")
                msgBox.exec_()
                # ------------------------------------------------------------------------------------------#
        else:
            msgBox = QtWidgets.QMessageBox()
            msgBox.setWindowTitle("Export Error")
            msgBox.setText("ไม่สามารถส่งออกข้อมูลได้เนื่องจากไม่มีข้อมูล")
            msgBox.exec_()

    def Datebtn(self):  #เรียกหน้าต่างวันเดือนปี
        self.DateInput = DateInputTable()
        self.DateInput.show()

    def Timebtn(self):  #เรียกหน้าต่างเวลา
        self.TimeInput = TimeInputTable()
        self.TimeInput.show()

    def CallTimeSLine(self):    #เพิ่มข้อมูลลงที่ค้นหา
        global Time_hms
        self.lineEdit_Search.setText(Time_hms)

    def CallDateSLine(self):    #เพิ่มข้อมูลลงที่ค้นหา
        global Date_dmy
        self.lineEdit_Search.setText(Date_dmy)


class DateInputTable(QtWidgets.QDialog):    #วันเดือนปี
    def __init__(self):
        super(DateInputTable, self).__init__()
        self.setWindowModality(Qt.ApplicationModal)
        self.setWindowTitle("Select Date")
        self.resize(400, 155)

        font_h = QtGui.QFont()
        font_h.setFamily("TH SarabunPSK")
        font_h.setPointSize(18)
        font_h.setBold(True)

        self.nameLabel = QLabel(self)
        self.nameLabel.setText("What date would you like to select?")
        self.nameLabel.setFont(font_h)
        self.nameLabel.move(15, 10)
        self.nameLabel.resize(400, 15)

        self.SlashQLabel1 = QLabel(self)
        self.SlashQLabel1.setText("/")
        self.SlashQLabel1.setFont(font_h)
        self.SlashQLabel1.move(135, 60)
        self.SlashQLabel1.resize(20, 15)

        self.SlashQLabel2 = QLabel(self)
        self.SlashQLabel2.setText("/")
        self.SlashQLabel2.setFont(font_h)
        self.SlashQLabel2.move(205, 60)
        self.SlashQLabel2.resize(20, 15)

        #------------------- Combo Box -------------------#
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)

        centralWidget = QWidget(self)
        self.comboBox_D = QComboBox(centralWidget)
        self.comboBox_D.setGeometry(QRect(80, 50, 50, 30))
        self.comboBox_D.setObjectName(("comboBox"))
        self.comboBox_D.setFont(font)
        for option in range(1,32):
            self.comboBox_D.addItem(str(option))

        self.comboBox_M = QComboBox(centralWidget)
        self.comboBox_M.setGeometry(QRect(150, 50, 50, 30))
        self.comboBox_M.setObjectName(("comboBox"))
        self.comboBox_M.setFont(font)
        for option in range(1,13):
            self.comboBox_M.addItem(str(option))

        dt_N = dt.datetime.now()
        Year_N = int(dt_N.strftime("%Y"))
        print(Year_N)
        self.comboBox_Y = QComboBox(centralWidget)
        self.comboBox_Y.setGeometry(QRect(220, 50, 80, 30))
        self.comboBox_Y.setObjectName(("comboBox"))
        self.comboBox_Y.setFont(font)
        for option in range(Year_N,1998,-1):
            self.comboBox_Y.addItem(str(option))
        # ------------------------------------------------#

        button = QtWidgets.QPushButton('OK', self)
        button.setToolTip('Confirm ')
        button.setFocusPolicy(QtCore.Qt.NoFocus)
        button.move(235, 120)
        button.resize(80, 30)
        button.clicked.connect(self.accept)

        button = QtWidgets.QPushButton('Cancel', self)
        button.setToolTip('Cancel ')
        button.setFocusPolicy(QtCore.Qt.NoFocus)
        button.move(315, 120)
        button.resize(80, 30)
        button.clicked.connect(self.reject)

    def accept(self):
        global Date_dmy,Table

        Check_Num = lambda z : "0" + str(z) if len(z) == 1 else str(z)

        date_Day = self.comboBox_D.currentText()
        date_Month = self.comboBox_M.currentText()
        date_Year = self.comboBox_Y.currentText()

        Date_dmy = Check_Num(date_Day) + "/" + Check_Num(date_Month) + "/" + Check_Num(date_Year)
        print("Day = ", date_Day, "Month = ", date_Month, "Year = ", date_Year)
        print("Date_dmy = ",Date_dmy)
        print("Time_hms = ", Time_hms)
        print("Ok")

        Ui_DatasellPage.CallDateSLine(Table)

        self.close()

class TimeInputTable(QtWidgets.QDialog):    #เวลา
    def __init__(self):
        super(TimeInputTable, self).__init__()
        self.setWindowModality(Qt.ApplicationModal)
        self.setWindowTitle("Select Time")
        self.resize(400, 155)

        font_h = QtGui.QFont()
        font_h.setFamily("TH SarabunPSK")
        font_h.setPointSize(18)
        font_h.setBold(True)

        self.nameLabel = QLabel(self)
        self.nameLabel.setText("What time do you want to choose?")
        self.nameLabel.setFont(font_h)
        self.nameLabel.move(15, 10)
        self.nameLabel.resize(400, 15)

        self.douQLabel1 = QLabel(self)
        self.douQLabel1.setText(":")
        self.douQLabel1.setFont(font_h)
        self.douQLabel1.move(140, 58)
        self.douQLabel1.resize(20, 15)

        self.douQLabel2 = QLabel(self)
        self.douQLabel2.setText(":")
        self.douQLabel2.setFont(font_h)
        self.douQLabel2.move(210, 58)
        self.douQLabel2.resize(20, 15)

        # -------------------Combo Box-------------------#
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)

        centralWidget = QWidget(self)
        self.comboBox_h = QComboBox(centralWidget)
        self.comboBox_h.setGeometry(QRect(80, 50, 50, 30))
        self.comboBox_h.setObjectName(("comboBox"))
        self.comboBox_h.setFont(font)
        for option in range(00, 24):
            self.comboBox_h.addItem(str(option))

        self.comboBox_m = QComboBox(centralWidget)
        self.comboBox_m.setGeometry(QRect(150, 50, 50, 30))
        self.comboBox_m.setObjectName(("comboBox"))
        self.comboBox_m.setFont(font)
        for option in range(00, 60):
            self.comboBox_m.addItem(str(option))

        self.comboBox_s = QComboBox(centralWidget)
        self.comboBox_s.setGeometry(QRect(220, 50, 50, 30))
        self.comboBox_s.setObjectName(("comboBox"))
        self.comboBox_s.setFont(font)
        for option in range(0, 60):
            self.comboBox_s.addItem(str(option))
        # ----------------------------------------------#

        button = QtWidgets.QPushButton('OK', self)
        button.setToolTip('Confirm ')
        button.setFocusPolicy(QtCore.Qt.NoFocus)
        button.move(235, 120)
        button.resize(80, 30)
        button.clicked.connect(self.accept)

        button = QtWidgets.QPushButton('Cancel', self)
        button.setToolTip('Cancel ')
        button.setFocusPolicy(QtCore.Qt.NoFocus)
        button.move(315, 120)
        button.resize(80, 30)
        button.clicked.connect(self.reject)

    def accept(self):
        global Time_hms,Table
        Check_Num = lambda z : "0" + str(z) if len(z)==1 else str(z)

        time_h = self.comboBox_h.currentText()
        time_m = self.comboBox_m.currentText()
        time_s = self.comboBox_s.currentText()
        Time_hms= Check_Num(time_h) + ":" + Check_Num(time_m) + ":" + Check_Num(time_s)
        print("Hour = ", time_h, "Minute = ", time_m, "Second = ", time_s)
        print("Date_dmy = ", Date_dmy)
        print("Time_hms = ",Time_hms)
        print("Ok")

        Ui_DatasellPage.CallTimeSLine(Table)

        self.close()



"""
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    DatasellPage = QtWidgets.QMainWindow()
    ui = Ui_DatasellPage()
    ui.setupUi(DatasellPage)
    DatasellPage.show()
    sys.exit(app.exec_())
"""