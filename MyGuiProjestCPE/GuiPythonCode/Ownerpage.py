# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Watcharanon Kerdkaew\PycharmProjects\MyGuiProjestCPE\DesignGui\Ownerpage.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

#---------------------- Connection Database Mysql ---------------------------#
import mysql.connector
cnx = mysql.connector.connect(host="localhost", user="root1", password="123456789", database="wprojectcpe62")       # connect to MySql database
cur = cnx.cursor()
#----------------------------------------------------------------------------#


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QTableWidget, QTableWidgetItem, QVBoxLayout, QLabel, QDialogButtonBox, QComboBox, QWidget, \
    QLineEdit
from PyQt5.QtGui import QIntValidator
from PyQt5.QtCore import *
import datetime as dt
import xlsxwriter
import pandas as pd

#Variable
Owner_N=[[]]
Table=""
rowUser = []
resultOwner = []
Search_N = ""

class Ui_OwnerPage(object):
    def setupUi(self, OwnerPage):
        global Table
        OwnerPage.setObjectName("OwnerPage")
        OwnerPage.resize(1280, 823)
        OwnerPage.showFullScreen()
        OwnerPage.setStyleSheet("#OwnerPage{background-color: rgb(178, 201, 255);}")
        self.centralwidget = QtWidgets.QWidget(OwnerPage)
        self.centralwidget.setObjectName("centralwidget")
        self.tableOwner_owner = QtWidgets.QTableWidget(self.centralwidget)
        self.tableOwner_owner.setGeometry(QtCore.QRect(20, 230, 1121, 561))
        Table = self            #Save Self main หลักๆ
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(14)
        self.tableOwner_owner.setFont(font)
        self.tableOwner_owner.setFocusPolicy(QtCore.Qt.NoFocus)
        self.tableOwner_owner.setAutoScrollMargin(16)
        self.tableOwner_owner.setObjectName("tableOwner_owner")
        self.tableOwner_owner.setColumnCount(6)
        self.tableOwner_owner.setRowCount(1)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableOwner_owner.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableOwner_owner.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableOwner_owner.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableOwner_owner.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableOwner_owner.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableOwner_owner.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableOwner_owner.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(14)
        item.setFont(font)
        self.tableOwner_owner.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(14)
        item.setFont(font)
        self.tableOwner_owner.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(14)
        item.setFont(font)
        self.tableOwner_owner.setItem(0, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(14)
        item.setFont(font)
        self.tableOwner_owner.setItem(0, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(14)
        item.setFont(font)
        self.tableOwner_owner.setItem(0, 4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(14)
        item.setFont(font)
        self.tableOwner_owner.setItem(0, 5, item)
        self.tableOwner_owner.horizontalHeader().setDefaultSectionSize(170)
        self.tableOwner_owner.horizontalHeader().setStretchLastSection(True)
        self.frameTopOwner = QtWidgets.QFrame(self.centralwidget)
        self.frameTopOwner.setGeometry(QtCore.QRect(20, 80, 901, 141))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        self.frameTopOwner.setFont(font)
        self.frameTopOwner.setStyleSheet("#frameTopOwner{background-color: rgb(255, 255, 255);}"
                                         "#pushButton_Confirmowner{background-color: rgb(13, 197, 90);}"
                                         "#pushButton_Cancelowner{background-color: rgb(255, 51, 51);}")
        self.frameTopOwner.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frameTopOwner.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frameTopOwner.setObjectName("frameTopOwner")

        self.lineEdit_Lastnameowner = QtWidgets.QLineEdit(self.frameTopOwner)
        self.lineEdit_Lastnameowner.setGeometry(QtCore.QRect(390, 10, 261, 31))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(14)
        self.lineEdit_Lastnameowner.setFont(font)
        self.lineEdit_Lastnameowner.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.lineEdit_Lastnameowner.setObjectName("lineEdit_Lastnameowner")

        self.label_Modelowner = QtWidgets.QLabel(self.frameTopOwner)
        self.label_Modelowner.setGeometry(QtCore.QRect(370, 60, 121, 31))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.label_Modelowner.setFont(font)
        self.label_Modelowner.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Modelowner.setObjectName("label_Modelowner")

        self.lineEdit_Nameowner = QtWidgets.QLineEdit(self.frameTopOwner)
        self.lineEdit_Nameowner.setGeometry(QtCore.QRect(30, 10, 241, 31))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(14)
        self.lineEdit_Nameowner.setFont(font)
        self.lineEdit_Nameowner.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.lineEdit_Nameowner.setObjectName("lineEdit_Nameowner")

        self.label_PhoneOwner = QtWidgets.QLabel(self.frameTopOwner)
        self.label_PhoneOwner.setGeometry(QtCore.QRect(0, 60, 121, 31))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.label_PhoneOwner.setFont(font)
        self.label_PhoneOwner.setAlignment(QtCore.Qt.AlignCenter)
        self.label_PhoneOwner.setObjectName("label_PhoneOwner")

        self.lineEdit_Phoneowner = QtWidgets.QLineEdit(self.frameTopOwner)
        self.lineEdit_Phoneowner.setGeometry(QtCore.QRect(120, 60, 221, 31))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(14)
        self.lineEdit_Phoneowner.setFont(font)
        self.lineEdit_Phoneowner.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.lineEdit_Phoneowner.setObjectName("lineEdit_Phoneowner")
        self.lineEdit_Phoneowner.setValidator(QIntValidator())

        self.label_SquareW = QtWidgets.QLabel(self.frameTopOwner)
        self.label_SquareW.setGeometry(QtCore.QRect(480, 60, 91, 31))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_SquareW.setFont(font)
        self.label_SquareW.setAlignment(QtCore.Qt.AlignCenter)
        self.label_SquareW.setObjectName("label_SquareW")

        self.lineEdit_SquareW = QtWidgets.QLineEdit(self.frameTopOwner)
        self.lineEdit_SquareW.setGeometry(QtCore.QRect(555, 60, 71, 31))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(14)
        self.lineEdit_SquareW.setFont(font)
        self.lineEdit_SquareW.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.lineEdit_SquareW.setObjectName("lineEdit_SquareW")
        self.lineEdit_SquareW.setValidator(QIntValidator())

        self.label_WavyW = QtWidgets.QLabel(self.frameTopOwner)
        self.label_WavyW.setGeometry(QtCore.QRect(620, 60, 91, 31))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_WavyW.setFont(font)
        self.label_WavyW.setAlignment(QtCore.Qt.AlignCenter)
        self.label_WavyW.setObjectName("label_WavyW")

        self.lineEdit_WavyW = QtWidgets.QLineEdit(self.frameTopOwner)
        self.lineEdit_WavyW.setGeometry(QtCore.QRect(700, 60, 71, 31))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(14)
        self.lineEdit_WavyW.setFont(font)
        self.lineEdit_WavyW.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.lineEdit_WavyW.setObjectName("lineEdit_WavyW")
        self.lineEdit_WavyW.setValidator(QIntValidator())

        self.label_Nameowner = QtWidgets.QLabel(self.frameTopOwner)
        self.label_Nameowner.setGeometry(QtCore.QRect(0, 10, 31, 31))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.label_Nameowner.setFont(font)
        self.label_Nameowner.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Nameowner.setObjectName("label_Nameowner")

        self.label_Lastnameowner = QtWidgets.QLabel(self.frameTopOwner)
        self.label_Lastnameowner.setGeometry(QtCore.QRect(300, 10, 91, 31))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.label_Lastnameowner.setFont(font)
        self.label_Lastnameowner.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Lastnameowner.setObjectName("label_Lastnameowner")

        self.pushButton_Confirmowner = QtWidgets.QPushButton(self.frameTopOwner)
        self.pushButton_Confirmowner.setGeometry(QtCore.QRect(670, 105, 110, 30))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Confirmowner.setFont(font)
        self.pushButton_Confirmowner.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_Confirmowner.setObjectName("pushButton_Confirmowner")

        self.pushButton_Cancelowner = QtWidgets.QPushButton(self.frameTopOwner)
        self.pushButton_Cancelowner.setGeometry(QtCore.QRect(785, 105, 110, 30))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Cancelowner.setFont(font)
        self.pushButton_Cancelowner.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_Cancelowner.setObjectName("pushButton_Cancelowner")

        self.frameSearchOwner = QtWidgets.QFrame(self.centralwidget)
        self.frameSearchOwner.setGeometry(QtCore.QRect(930, 80, 331, 141))
        self.frameSearchOwner.setStyleSheet("#frameSearchOwner{background-color: rgb(255, 255, 255);}")
        self.frameSearchOwner.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frameSearchOwner.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frameSearchOwner.setObjectName("frameSearchOwner")

        self.pushButton_Search = QtWidgets.QPushButton(self.frameSearchOwner)
        self.pushButton_Search.setGeometry(QtCore.QRect(259, 105, 61, 30))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Search.setFont(font)
        self.pushButton_Search.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_Search.setStyleSheet("background-color: rgb(170, 85, 255);")
        self.pushButton_Search.setObjectName("pushButton_Search")

        self.label_Search = QtWidgets.QLabel(self.frameSearchOwner)
        self.label_Search.setGeometry(QtCore.QRect(130, 10, 61, 31))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.label_Search.setFont(font)
        self.label_Search.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Search.setObjectName("label_Search")

        self.lineEdit_Search = QtWidgets.QLineEdit(self.frameSearchOwner)
        self.lineEdit_Search.setGeometry(QtCore.QRect(10, 55, 311, 31))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(14)
        self.lineEdit_Search.setFont(font)
        self.lineEdit_Search.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.lineEdit_Search.setObjectName("lineEdit_Search")

        self.frameSideOwner = QtWidgets.QFrame(self.centralwidget)
        self.frameSideOwner.setGeometry(QtCore.QRect(1149, 230, 111, 561))
        self.frameSideOwner.setStyleSheet("#frameSideOwner{background-color: rgb(255, 255, 255);}")
        self.frameSideOwner.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frameSideOwner.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frameSideOwner.setObjectName("frameSideOwner")

        self.pushButton_EditOwner = QtWidgets.QPushButton(self.frameSideOwner)
        self.pushButton_EditOwner.setGeometry(QtCore.QRect(20, 20, 70, 70))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_EditOwner.setFont(font)
        self.pushButton_EditOwner.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_EditOwner.setStyleSheet("background-color: rgb(102, 143, 255);")
        self.pushButton_EditOwner.setObjectName("pushButton_EditOwner")

        self.pushButton_ExitOwner = QtWidgets.QPushButton(self.frameSideOwner)
        self.pushButton_ExitOwner.setGeometry(QtCore.QRect(20, 475, 70, 70))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_ExitOwner.setFont(font)
        self.pushButton_ExitOwner.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_ExitOwner.setStyleSheet("background-color: rgb(255, 51, 51);")
        self.pushButton_ExitOwner.setObjectName("pushButton_ExitOwner")

        self.pushButton_DelOwner = QtWidgets.QPushButton(self.frameSideOwner)
        self.pushButton_DelOwner.setGeometry(QtCore.QRect(20, 120, 70, 70))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_DelOwner.setFont(font)
        self.pushButton_DelOwner.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_DelOwner.setStyleSheet("background-color: rgb(255, 125, 11);")
        self.pushButton_DelOwner.setObjectName("pushButton_DelOwner")

        self.pushButton_ReOwner = QtWidgets.QPushButton(self.frameSideOwner)
        self.pushButton_ReOwner.setGeometry(QtCore.QRect(20, 220, 70, 70))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_ReOwner.setFont(font)
        self.pushButton_ReOwner.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_ReOwner.setStyleSheet("background-color: rgb(153, 255, 255);")
        self.pushButton_ReOwner.setObjectName("pushButton_ReOwner")

        self.pushButton_ExportOwner = QtWidgets.QPushButton(self.frameSideOwner)
        self.pushButton_ExportOwner.setGeometry(QtCore.QRect(20, 320, 70, 70))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_ExportOwner.setFont(font)
        self.pushButton_ExportOwner.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_ExportOwner.setStyleSheet("background-color: rgb(37, 84, 255);")
        self.pushButton_ExportOwner.setObjectName("pushButton_ExportOwner")

        self.frameNamePage = QtWidgets.QFrame(self.centralwidget)
        self.frameNamePage.setGeometry(QtCore.QRect(-1, -1, 1281, 71))
        self.frameNamePage.setStyleSheet("#frameNamePage{background-color: rgb(254, 255, 178);}")
        self.frameNamePage.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frameNamePage.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frameNamePage.setObjectName("frameNamePage")

        self.label_NamePage = QtWidgets.QLabel(self.frameNamePage)
        self.label_NamePage.setGeometry(QtCore.QRect(470, 10, 331, 51))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.label_NamePage.setFont(font)
        self.label_NamePage.setAlignment(QtCore.Qt.AlignCenter)
        self.label_NamePage.setObjectName("label_NamePage")
        OwnerPage.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(OwnerPage)
        self.statusbar.setObjectName("statusbar")
        OwnerPage.setStatusBar(self.statusbar)

        # Select all Row
        self.tableOwner_owner.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)

        self.retranslateUi(OwnerPage)
        QtCore.QMetaObject.connectSlotsByName(OwnerPage)

    def retranslateUi(self, OwnerPage):
        _translate = QtCore.QCoreApplication.translate
        OwnerPage.setWindowTitle(_translate("OwnerPage", "OwnerPage"))
        item = self.tableOwner_owner.verticalHeaderItem(0)
        item.setText(_translate("OwnerPage", "1"))
        item = self.tableOwner_owner.horizontalHeaderItem(0)
        item.setText(_translate("OwnerPage", "รหัสลูกค้า"))
        item = self.tableOwner_owner.horizontalHeaderItem(1)
        item.setText(_translate("OwnerPage", "ชื่อ"))
        item = self.tableOwner_owner.horizontalHeaderItem(2)
        item.setText(_translate("OwnerPage", "นามสกุล"))
        item = self.tableOwner_owner.horizontalHeaderItem(3)
        item.setText(_translate("OwnerPage", "แบบพิมพ์"))
        item = self.tableOwner_owner.horizontalHeaderItem(4)
        item.setText(_translate("OwnerPage", "น้ำหนัก"))
        item = self.tableOwner_owner.horizontalHeaderItem(5)
        item.setText(_translate("OwnerPage", "เบอร์โทรศัพท์"))
        __sortingEnabled = self.tableOwner_owner.isSortingEnabled()
        self.tableOwner_owner.setSortingEnabled(False)

        self.tableOwner_owner.setSortingEnabled(__sortingEnabled)
        self.label_Modelowner.setText(_translate("OwnerPage", "แบบแม่พิมพ์ :"))
        self.label_PhoneOwner.setText(_translate("OwnerPage", "เบอร์โทรศัพท์"))
        self.label_SquareW.setText(_translate("OwnerPage", "สี่เหลี่ยม"))
        self.label_WavyW.setText(_translate("OwnerPage", "แบบหยัก"))
        self.label_Nameowner.setText(_translate("OwnerPage", "ชื่อ"))
        self.label_Lastnameowner.setText(_translate("OwnerPage", "นามสกุล"))
        self.pushButton_Confirmowner.setText(_translate("OwnerPage", "ยืนยัน"))
        self.pushButton_Cancelowner.setText(_translate("OwnerPage", "ยกเลิก"))
        self.pushButton_Search.setText(_translate("OwnerPage", "ค้นหา"))
        self.label_Search.setText(_translate("OwnerPage", "ค้นหา"))
        self.pushButton_EditOwner.setText(_translate("OwnerPage", "แก้ไข"))
        self.pushButton_ExitOwner.setText(_translate("OwnerPage", "ออก"))
        self.pushButton_DelOwner.setText(_translate("OwnerPage", "ลบ"))
        self.pushButton_ReOwner.setText(_translate("OwnerPage", "รีเฟรช"))
        self.pushButton_ExportOwner.setText(_translate("OwnerPage", "ส่งออก"))
        self.label_NamePage.setText(_translate("OwnerPage", "ลูกค้าประจำ"))


        # Action Code
        # *-------ปุ่มปิดหน้า-------* #
        self.pushButton_ExitOwner.clicked.connect(lambda :self.ExitOwnerpage(OwnerPage))

        # *-------โหลดTable--------* #
        self.LoadDataTable()

        # *----ปุ่มการทำงาน--------* #
        self.pushButton_Confirmowner.clicked.connect(self.Confirmbtn)
        self.pushButton_Cancelowner.clicked.connect(self.Cancelbtn)
        self.pushButton_Search.clicked.connect(self.SearchOwnerbtn)
        self.pushButton_EditOwner.clicked.connect(self.Editbtn)
        self.pushButton_DelOwner.clicked.connect(self.DeleteOwner)
        self.pushButton_ReOwner.clicked.connect(self.RefreshOwner)
        self.pushButton_ExportOwner.clicked.connect(self.ExportOwner)

    def LoadDataTable(self):    #โหลดหน้าต่างลูกค้าประจำ
        cnx.connect()
        cur.execute("SELECT ID ,Username, Lastname, Model, Weight, Phone FROM ownerpage ")
        # -------------------- Load Data raw Material *----------------#
        result = cur.fetchall()
        self.tableOwner_owner.setRowCount(0)
        # self.tb_raw_material.setColumnCount(6)
        Owner_N.clear()
        for row_number, row_data in enumerate(result):
            print(row_number)
            self.tableOwner_owner.insertRow(row_number)

            for column_number, data in enumerate(row_data):
                print(column_number)

                item = QtWidgets.QTableWidgetItem(str(data))
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                self.tableOwner_owner.setItem(row_number, column_number, item)
                Owner_N.append([])
                Owner_N[row_number].append(str(data))
                print(Owner_N[row_number])
        # -----------------------------------------------#

    def ExitOwnerpage(self, OwnerPage):     #ออกจากหน้าต่างลูกค้าประจำ
        OwnerPage.close()

    def Confirmbtn(self):   #ยืนยันข้อมูลที่ทำการกรอก
        UsernameOwner = self.lineEdit_Nameowner.text()
        LastnameOwner = self.lineEdit_Lastnameowner.text()
        PhoneOwner = self.lineEdit_Phoneowner.text()
        SquareWOwner = self.lineEdit_SquareW.text()
        WavyWOwner = self.lineEdit_WavyW.text()
        ModelOwner = []
        cnx.connect()
        print("Num Phone = ",len(PhoneOwner))
        cur.execute(
            "SELECT ID, Username, Lastname , Phone FROM ownerpage WHERE Username='%s'AND Lastname='%s'AND Phone='%s' " % (
                UsernameOwner, LastnameOwner, PhoneOwner))
        rowtable = cur.fetchone()

        if rowtable == None:
            if len(PhoneOwner) <= 10:
                Check_Z = lambda z: "0" if (int(z) + 0) == 0 else str(z)
                Check_Empty = lambda e: "0"+e if e == "" else str(e)
                Check_NumF1 = lambda n: str(int(n)) if n[0] == "0" else str(n)

                Check_Square = Check_Z(Check_Empty(SquareWOwner))
                Check_Wavy = Check_Z(Check_Empty(WavyWOwner))

                Check_Zline = (Check_Square != "0" and Check_Wavy != "0" ) or ((Check_Square != "" and Check_Wavy != "0" ) or (Check_Square != "0" and Check_Wavy != "" )) or \
                              ((Check_Square != "" and Check_Wavy != "0" ) and (Check_Square != "0" and Check_Wavy != "" ))

                if UsernameOwner != "" and LastnameOwner != "" and PhoneOwner != "" and (SquareWOwner != "" or WavyWOwner != "") and Check_Zline :
                    if SquareWOwner != "" :
                        ModelOwner.append("Square")
                    if WavyWOwner != "" :
                        ModelOwner.append("Wavy")
                    # --------- รวมน้ำหนัก Square Wavy ----------------#
                    M = len(ModelOwner)
                    if M != 2:
                        ModelS = str(ModelOwner[0])
                        if ModelS == "Square" :
                            Weight = Check_NumF1(SquareWOwner)
                        elif ModelS == "Wavy" :
                            Weight = Check_NumF1(WavyWOwner)
                    elif M == 2:
                        if Check_Wavy== "0":
                            ModelS = ModelOwner[0]
                            Weight = Check_NumF1(SquareWOwner)
                        elif Check_Square == "0":
                            ModelS = ModelOwner[1]
                            Weight = Check_NumF1(WavyWOwner)
                        else:
                            ModelS = (ModelOwner[0]) + "/" + (ModelOwner[1])
                            Weight = Check_NumF1(SquareWOwner) + "/" + Check_NumF1(WavyWOwner)
                    # ------------------------------- ---------------#

                    cur.execute(
                        "INSERT INTO ownerpage(Username, Lastname , Model, Weight, Phone) VALUES ('%s','%s','%s','%s','%s')" % (
                            UsernameOwner, LastnameOwner, ModelS, Weight, PhoneOwner))
                    cnx.commit()

                    self.lineEdit_Nameowner.clear()
                    self.lineEdit_Lastnameowner.clear()
                    self.lineEdit_Phoneowner.clear()
                    self.lineEdit_SquareW.clear()
                    self.lineEdit_WavyW.clear()
                    Ui_OwnerPage.LoadDataTable(Table)
                else:
                    msgBox = QtWidgets.QMessageBox()
                    msgBox.setWindowTitle("Error")
                    msgBox.setText("กรุณากรอกชื่อ นามสกุล เบอร์โทรศัทพ์ ให้ครบถ้วน และกำหนดน้ำหนักให้ถูกต้อง")
                    msgBox.exec_()
            else:
                msgBox = QtWidgets.QMessageBox()
                msgBox.setWindowTitle("Error")
                msgBox.setText("เบอร์โทรเกิน 10 ตัว")
                msgBox.exec_()
        elif rowtable != None:
            if UsernameOwner == rowtable[1] and LastnameOwner == rowtable[2] and PhoneOwner == rowtable[3]:
                msgBox = QtWidgets.QMessageBox()
                msgBox.setWindowTitle("Error")
                msgBox.setText("มีชื่อ นามสกุล และเบอร์โทรศัทพ์ ชุดนี้ในรายการแล้ว")
                msgBox.exec_()

    def Cancelbtn(self):    #ยกเลิกการกรอกข้อมูล
        self.lineEdit_Nameowner.clear()
        self.lineEdit_Lastnameowner.clear()
        self.lineEdit_Phoneowner.clear()
        self.lineEdit_SquareW.clear()
        self.lineEdit_WavyW.clear()
        Ui_OwnerPage.LoadDataTable(Table)

    def SearchOwnerbtn(self):   #ค้นหา
        global resultOwner,Search_N
        Texts = str(self.lineEdit_Search.text())
        cnx.connect()
        cur.execute("SELECT * FROM ownerpage ")
        rowtable = cur.fetchall()
        if rowtable != []:
            if Texts != "":
                cur.execute(
                    "SELECT * FROM ownerpage WHERE ID='%s' OR Username='%s' OR Lastname='%s' OR Model='%s' OR Weight='%s' OR Phone='%s' " % (
                    Texts, Texts, Texts, Texts, Texts, Texts))
                # -------------------- Load Data raw Material *----------------#
                resultOwner = cur.fetchall()
                self.tableOwner_owner.setRowCount(0)
                Owner_N.clear()
                for row_number, row_data in enumerate(resultOwner):
                    print(row_number)
                    self.tableOwner_owner.insertRow(row_number)

                    for column_number, data in enumerate(row_data):
                        print(column_number)

                        item = QtWidgets.QTableWidgetItem(str(data))
                        item.setTextAlignment(QtCore.Qt.AlignCenter)
                        self.tableOwner_owner.setItem(row_number, column_number, item)

                        Owner_N.append([])
                        Owner_N[row_number].append(str(data))
                        print(Owner_N[row_number])
                # ------------------------------------------------------------#
                Search_N = "1"
            else:
                msgBox = QtWidgets.QMessageBox()
                msgBox.setWindowTitle("Error")
                msgBox.setText("กรุณากรอกข้อมูลก่อนกดค้นหา")
                msgBox.exec_()
        else:
            msgBox = QtWidgets.QMessageBox()
            msgBox.setWindowTitle("Search Error")
            msgBox.setText("ไม่สามารถค้นหาข้อมูลได้เนื่องจากไม่มีข้อมูล")
            msgBox.exec_()

    def Editbtn(self):  #เรียกหน้าต่างแก้ไข
        print("Edit!")
        global rowUser
        rowUser = self.tableOwner_owner.currentRow()
        if rowUser != -1 :
            self.EditInput = Edit_Input()
            self.EditInput.show()
        elif rowUser == -1:
            msgBox = QtWidgets.QMessageBox()
            msgBox.setWindowTitle("Error")
            msgBox.setText("กรุณาเลือกข้อมูลในตารางลูกค้าประจำ")
            msgBox.exec_()

    def DeleteOwner(self):  #ลบข้อมูล
        rowUser = self.tableOwner_owner.currentRow()
        if rowUser != -1:
            print(rowUser)
            idUser = Owner_N[rowUser][0]
            print("ID Del = ", idUser)
            cnx.connect()
            cur.execute("DELETE FROM ownerpage WHERE ID='%s'" % (idUser))
            cnx.commit()
            Ui_OwnerPage.LoadDataTable(Table)
            self.lineEdit_Search.clear()
        else:
            msgBox = QtWidgets.QMessageBox()
            msgBox.setWindowTitle("Error")
            msgBox.setText("กรุณาเลือกข้อมูลที่ต้องการลบ")
            msgBox.exec_()

    def RefreshOwner(self): #รีเฟรชหน้าต่าง
        global Search_N
        Search_N = ""
        Ui_OwnerPage.LoadDataTable(Table)
        self.lineEdit_Search.clear()

    def ExportOwner(self):      #ส่งออกข้อมูลเป็น Excel สกุลไฟล์.xlsx
        global resultOwner,Search_N
        cur.execute("SELECT * FROM ownerpage ")
        rowtable = cur.fetchall()
        print(rowtable)
        Id_User = []
        Name_User = []
        Last_User = []
        Model_User = []
        Weight_User = []
        Phone_User = []
        if rowtable != []:
            if Search_N == "1":
                # -----------------------------------------Excel Pandas-------------------------------------#
                if resultOwner != []:
                    row1 = resultOwner[0]
                    print(row1)

                    for r1 in range(len(resultOwner)):
                        print("round = ", r1)
                        for r2 in range(len(resultOwner[r1])):
                            if r2 == 0:
                                Id_User.append(resultOwner[r1][r2])
                            elif r2 == 1:
                                Name_User.append(resultOwner[r1][r2])
                            elif r2 == 2:
                                Last_User.append(resultOwner[r1][r2])
                            elif r2 == 3:
                                Model_User.append(resultOwner[r1][r2])
                            elif r2 == 4:
                                Weight_User.append(resultOwner[r1][r2])
                            elif r2 == 5:
                                Phone_User.append(resultOwner[r1][r2])
    
                    # สร้าง DataFrame ที่มี 1 คอลัมน์ชื่อ 'Data'
                    dataframe = pd.DataFrame({'ID': Id_User,
                                              'Username': Name_User,
                                              'Lastname': Last_User,
                                              'Model': Model_User,
                                              'Weight': Weight_User,
                                              'Phone': Phone_User})
    
                    # สร้าง Pandas Excel Writer เพื่อใช้เขียนไฟล์ Excel โดยใช้ Engine เป็น xlsxwriter
                    # โดยตั้งชื่อไฟล์ว่า 'simple_data.xlsx'
                    dt_N = dt.datetime.now()
                    Date_N = str(dt_N.strftime("%d%m%y"))
                    Time_N = str(dt_N.strftime("%H%M%S"))
                    fileName = "C:/Users/Watcharanon Kerdkaew/PycharmProjects/MyGuiProjestCPE/Export/"
                    writer = pd.ExcelWriter(fileName + 'simple_data_Ownerpage.xlsx', engine='xlsxwriter')
    
                    # นำข้อมูลที่สร้างไว้ในตัวแปร dataframe เขียนลงไฟล์ ||+Date_N+'_'+Time_N+
                    dataframe.to_excel(writer)
    
                    # จบการทำงาน Pandas Excel writer และเซฟข้อมูลออกมาเป็นไฟล์ Excel
                    writer.save()
    
                    msgBox = QtWidgets.QMessageBox()
                    msgBox.setWindowTitle("Export")
                    msgBox.setText("ส่งออกข้อมูลสำเร็จ")
                    msgBox.exec_()
                    # ------------------------------------------------------------------------------------------#
                else:
                    msgBox = QtWidgets.QMessageBox()
                    msgBox.setWindowTitle("Export")
                    msgBox.setText("ไม่มีข้อมูลให้ทำการส่งออก")
                    msgBox.exec_()
            else:
                # -----------------------------------------Excel Pandas-------------------------------------#
                cur.execute("SELECT * FROM ownerpage ")
                rowtable = cur.fetchall()
                row1 = rowtable[0]
                print(row1)

                for r1 in range(len(rowtable)):
                    print("round = ", r1)
                    for r2 in range(len(rowtable[r1])):
                        if r2 == 0:
                            Id_User.append(rowtable[r1][r2])
                        elif r2 == 1:
                            Name_User.append(rowtable[r1][r2])
                        elif r2 == 2:
                            Last_User.append(rowtable[r1][r2])
                        elif r2 == 3:
                            Model_User.append(rowtable[r1][r2])
                        elif r2 == 4:
                            Weight_User.append(rowtable[r1][r2])
                        elif r2 == 5:
                            Phone_User.append(rowtable[r1][r2])
    
                # สร้าง DataFrame ที่มี 1 คอลัมน์ชื่อ 'Data'
                dataframe = pd.DataFrame({'ID': Id_User,
                                          'Username': Name_User,
                                          'Lastname': Last_User,
                                          'Model': Model_User,
                                          'Weight': Weight_User,
                                          'Phone': Phone_User})
    
                # สร้าง Pandas Excel Writer เพื่อใช้เขียนไฟล์ Excel โดยใช้ Engine เป็น xlsxwriter
                # โดยตั้งชื่อไฟล์ว่า 'simple_data.xlsx'
                dt_N = dt.datetime.now()
                Date_N = str(dt_N.strftime("%d%m%y"))
                Time_N = str(dt_N.strftime("%H%M%S"))
                fileName = "C:/Users/Watcharanon Kerdkaew/PycharmProjects/MyGuiProjestCPE/Export/"
                writer = pd.ExcelWriter(fileName + 'simple_data_Ownerpage.xlsx', engine='xlsxwriter')
    
                # นำข้อมูลที่สร้างไว้ในตัวแปร dataframe เขียนลงไฟล์ ||+Date_N+'_'+Time_N+
                dataframe.to_excel(writer)
    
                # จบการทำงาน Pandas Excel writer และเซฟข้อมูลออกมาเป็นไฟล์ Excel
                writer.save()
                msgBox = QtWidgets.QMessageBox()
                msgBox.setWindowTitle("Export")
                msgBox.setText("ส่งออกข้อมูลสำเร็จ")
                msgBox.exec_()
                # ------------------------------------------------------------------------------------------#
        else:
            msgBox = QtWidgets.QMessageBox()
            msgBox.setWindowTitle("Export Error")
            msgBox.setText("ไม่สามารถส่งออกข้อมูลได้เนื่องจากไม่มีข้อมูล")
            msgBox.exec_()

class Edit_Input(QtWidgets.QDialog):    #แก้ไขข้อมูล
    def __init__(self):
        super(Edit_Input, self).__init__()
        self.setWindowModality(Qt.ApplicationModal)
        self.setWindowTitle("Edit Owner")
        self.resize(901, 200)
        global Table,Owner_N,rowUser

        font_h = QtGui.QFont()
        font_h.setFamily("TH SarabunPSK")
        font_h.setPointSize(18)
        font_h.setBold(True)

        self.nameLabel = QLabel(self)
        self.nameLabel.setFont(font_h)
        self.nameLabel.setText("แก้ไขข้อมูลลูกค้าประจำ")
        self.nameLabel.move(380, 15)
        self.nameLabel.resize(500, 30)

        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)

        self.nameOwnerLabel = QLabel(self)
        self.nameOwnerLabel.setFont(font)
        self.nameOwnerLabel.setText("ชื่อ")
        self.nameOwnerLabel.move(20, 65)
        self.nameOwnerLabel.resize(31, 31)

        self.lastnameOnwerLabel = QLabel(self)
        self.lastnameOnwerLabel.setFont(font)
        self.lastnameOnwerLabel.setText("นามสกุล")
        self.lastnameOnwerLabel.move(320, 65)
        self.lastnameOnwerLabel.resize(50, 31)

        self.phoneOwnerLabel = QLabel(self)
        self.phoneOwnerLabel.setFont(font)
        self.phoneOwnerLabel.setText("เบอร์โทรศัพท์")
        self.phoneOwnerLabel.move(20, 110)
        self.phoneOwnerLabel.resize(80, 31)

        self.modelOwnerLabel = QLabel(self)
        self.modelOwnerLabel.setFont(font)
        self.modelOwnerLabel.setText("แบบแม่พิมพ์ :")
        self.modelOwnerLabel.move(390, 110)
        self.modelOwnerLabel.resize(80, 31)

        self.squareWLabel = QLabel(self)
        self.squareWLabel.setFont(font)
        self.squareWLabel.setText("สี่เหลี่ยม")
        self.squareWLabel.move(500, 110)
        self.squareWLabel.resize(50, 31)

        self.wavyWLabel = QLabel(self)
        self.wavyWLabel.setFont(font)
        self.wavyWLabel.setText("แบบหยัก")
        self.wavyWLabel.move(640, 110)
        self.wavyWLabel.resize(50, 31)

        # ------------------- Line Edit -------------------#
        centralWidget = QWidget(self)
        self.lineEdit_name = QLineEdit(centralWidget)
        self.lineEdit_name.setGeometry(QRect(50, 65, 241, 31))
        self.lineEdit_name.setFont(font)
        self.lineEdit_name.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.lineEdit_name.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lineEdit_name.setObjectName("lineEdit_name")
        self.lineEdit_name.setText(Owner_N[rowUser][1])

        self.lineEdit_lastname = QLineEdit(centralWidget)
        self.lineEdit_lastname.setGeometry(QRect(380, 65, 261, 31))
        self.lineEdit_lastname.setFont(font)
        self.lineEdit_lastname.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.lineEdit_lastname.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lineEdit_lastname.setObjectName("lineEdit_lastname")
        self.lineEdit_lastname.setText(Owner_N[rowUser][2])

        self.lineEdit_phone = QLineEdit(centralWidget)
        self.lineEdit_phone.setGeometry(QRect(105, 110, 221, 31))
        self.lineEdit_phone.setFont(font)
        self.lineEdit_phone.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.lineEdit_phone.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lineEdit_phone.setObjectName("lineEdit_phone")
        self.lineEdit_phone.setValidator(QIntValidator())
        self.lineEdit_phone.setText(Owner_N[rowUser][5])

        self.lineEdit_square = QLineEdit(centralWidget)
        self.lineEdit_square.setGeometry(QRect(555, 110, 71, 31))
        self.lineEdit_square.setFont(font)
        self.lineEdit_square.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.lineEdit_square.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lineEdit_square.setObjectName("lineEdit_square")
        self.lineEdit_square.setValidator(QIntValidator())

        self.lineEdit_wavy = QLineEdit(centralWidget)
        self.lineEdit_wavy.setGeometry(QRect(700, 110, 71, 31))
        self.lineEdit_wavy.setFont(font)
        self.lineEdit_wavy.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.lineEdit_wavy.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lineEdit_wavy.setValidator(QIntValidator())
        self.lineEdit_wavy.setObjectName("lineEdit_wavy")
        # ------------------------------------------------#

        # ------------------ ตรวจสอบประเภทและน้ำหนัก ---------------------#
        Model = Owner_N[rowUser][3]
        MWeight = Owner_N[rowUser][4]
        Square = ""
        Wavy = ""
        if Model == "Square":
            print("Model = ", Model)
            self.lineEdit_square.setText(MWeight)
            self.lineEdit_wavy.clear()
        elif Model == "Wavy":
            print("Model = ", Model)
            self.lineEdit_wavy.setText(MWeight)
            self.lineEdit_square.clear()
        else:
            # --------- แยกน้ำหนัก Square Wavy ---------------#
            for r in range(len(MWeight)):
                if r < MWeight.find('/'):
                    Square = Square + MWeight[r]
                elif r > MWeight.find('/'):
                    Wavy = Wavy + MWeight[r]
            print("r = ", r, "Square = ", Square, "Wavy = ", Wavy)
            # ---------------------------------------------#
            self.lineEdit_square.setText(Square)
            self.lineEdit_wavy.setText(Wavy)
        # -------------------------------------------------------------#

        button = QtWidgets.QPushButton('OK', self)
        button.setToolTip('Confirm')
        button.setFocusPolicy(QtCore.Qt.NoFocus)
        button.move(720, 165)
        button.resize(80,25)
        button.clicked.connect(self.accept)

        button = QtWidgets.QPushButton('Cancel', self)
        button.setToolTip('Cancel')
        button.setFocusPolicy(QtCore.Qt.NoFocus)
        button.move(810, 165)
        button.resize(80, 25)
        button.clicked.connect(self.reject)

    def accept(self):
        global Table,rowUser,Owner_N
        print("Ok")
        UsernameOwner = self.lineEdit_name.text()
        LastnameOwner = self.lineEdit_lastname.text()
        PhoneOwner =self.lineEdit_phone.text()
        SquareWOwner=self.lineEdit_square.text()
        WavyWOwner=self.lineEdit_wavy.text()
        ModelOwner = []

        if len(PhoneOwner) <= 10:
                Check_Z = lambda z: "0" if (int(z) + 0) == 0 else str(z)
                Check_Empty = lambda e: "0" + e if e == "" else str(e)
                Check_NumF1 = lambda n: str(int(n)) if n[0] == "0" else str(n)

                Check_Square = Check_Z(Check_Empty(SquareWOwner))
                Check_Wavy = Check_Z(Check_Empty(WavyWOwner))

                Check_Zline = (Check_Square != "0" and Check_Wavy != "0") or (
                            (Check_Square != "" and Check_Wavy != "0") or (Check_Square != "0" and Check_Wavy != "")) or \
                              ((Check_Square != "" and Check_Wavy != "0") and (Check_Square != "0" and Check_Wavy != ""))

                if UsernameOwner != "" and LastnameOwner != "" and PhoneOwner != "" and (
                        SquareWOwner != "" or WavyWOwner != "") and Check_Zline:
                    if SquareWOwner != "":
                        ModelOwner.append("Square")
                    if WavyWOwner != "":
                        ModelOwner.append("Wavy")
                    # --------- รวมน้ำหนัก Square Wavy ----------------#
                    M = len(ModelOwner)
                    if M != 2:
                        ModelS = str(ModelOwner[0])
                        if ModelS == "Square":
                            Weight = Check_NumF1(SquareWOwner)
                        elif ModelS == "Wavy":
                            Weight = Check_NumF1(WavyWOwner)
                    elif M == 2:
                        if Check_Wavy == "0":
                            ModelS = ModelOwner[0]
                            Weight = Check_NumF1(SquareWOwner)
                        elif Check_Square == "0":
                            ModelS = ModelOwner[1]
                            Weight = Check_NumF1(WavyWOwner)
                        else:
                            ModelS = (ModelOwner[0]) + "/" + (ModelOwner[1])
                            Weight = Check_NumF1(SquareWOwner) + "/" + Check_NumF1(WavyWOwner)
                    # ------------------------------- ---------------#
                    cur.execute(
                        "UPDATE ownerpage SET Username='%s', Lastname='%s', Model='%s', Weight='%s' , Phone='%s' WHERE ID='%s' " % (
                            UsernameOwner, LastnameOwner, ModelS, Weight, PhoneOwner, Owner_N[rowUser][0]))
                    cnx.commit()
                    Ui_OwnerPage.LoadDataTable(Table)
                    self.close()
                else:
                    msgBox = QtWidgets.QMessageBox()
                    msgBox.setWindowTitle("Error")
                    msgBox.setText("กรุณากรอกชื่อ นามสกุล เบอร์โทรศัทพ์ ให้ครบถ้วน และกำหนดน้ำหนักให้ถูกต้อง")
                    msgBox.exec_()
        else:
                msgBox = QtWidgets.QMessageBox()
                msgBox.setWindowTitle("Error")
                msgBox.setText("เบอร์โทรเกิน 10 ตัว")
                msgBox.exec_()

"""
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    OwnerPage = QtWidgets.QMainWindow()
    ui = Ui_OwnerPage()
    ui.setupUi(OwnerPage)
    OwnerPage.show()
    sys.exit(app.exec_())
"""