# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Watcharanon Kerdkaew\PycharmProjects\MyGuiProjestCPE\DesignGui\Mainpage.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

#---------------------- Connection Database Mysql ---------------------------#
import mysql.connector
cnx = mysql.connector.connect(host="localhost", user="root1", password="123456789", database="wprojectcpe62")       # connect to MySql database
cur = cnx.cursor()
#----------------------------------------------------------------------------#

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QTableWidget, QTableWidgetItem, QVBoxLayout, QLabel, QDialogButtonBox, QComboBox, QWidget, \
    QLineEdit, QProgressBar
from PyQt5.QtCore import *
import datetime as dt

from Ownerpage import Ui_OwnerPage
from Datasellpage import Ui_DatasellPage
from Optionpage import Ui_OptionPage

# *--- Variable ---*
Entryweight = ""
Owner_N = [[]]
QOrder_N = [[]]
Table = ""
Squaremodel = ""
Wavymodel = ""
SquareW = "0"   #ตัวแปรที่ใช้นำมาเก็บค่าน้ำหนักแบบสี่เหลี่ยม
WavyW = "0"     #ตัวแปรที่ใช้นำมาเก็บค่าน้ำหนักแบบหยัก
DataOwner = [] #เก็บข้อมูลลูกค้าใน qorderpage เมื่อกดปุ่มเริ่ม

# *--- Weight Fixed Input ---*
Texts_num = ""

# *--- Search Table ---*
Texts_N = ""
Texts_L = ""

# *--- Default Price ---*
Price_Square = "60"   # 60฿
Price_Wavy = "60"     # 60฿

# *--- Ref.Load Cell ---*
Stock_Square = "10"
Stock_Wavy = "20"
Stock_Salver = "30"

# *--- Check Button Start Stop Cancel---*
Check_btn = "Start"

class Ui_MainPage(object):
    def setupUi(self, MainPage):
        global Table
        MainPage.setObjectName("MainPage")
        MainPage.resize(1280, 800)
        
        
        MainPage.setStyleSheet("#MainPage{background-color: rgb(178, 201, 255);}\n"
        "\n"
        "#pushButton_Owner{\n"
        "    background-color: rgb(228, 147, 255);}\n"
        "#pushButton_Datasell{\n"
        "    background-color: rgb(255, 164, 111);}\n"
        "#pushButton_Option{\n"
        "    background-color: rgb(233, 205, 255);}\n"
        "\n"
        "#pushButton_0{\n"
        "    background-color: rgb(255, 255, 255);\n"
        "    color: rgb(37, 84, 255);}\n"
        "#pushButton_1{\n"
        "    background-color: rgb(255, 255, 255);\n"
        "    color: rgb(37, 84, 255);}\n"
        "#pushButton_2{\n"
        "    background-color: rgb(255, 255, 255);\n"
        "    color: rgb(37, 84, 255);}\n"
        "#pushButton_3{\n"
        "    background-color: rgb(255, 255, 255);\n"
        "    color: rgb(37, 84, 255);}\n"
        "#pushButton_4{\n"
        "    background-color: rgb(255, 255, 255);\n"
        "    color: rgb(37, 84, 255);}\n"
        "#pushButton_5{\n"
        "    background-color: rgb(255, 255, 255);\n"
        "    color: rgb(37, 84, 255);}\n"
        "#pushButton_6{\n"
        "    background-color: rgb(255, 255, 255);\n"
        "    color: rgb(37, 84, 255);}\n"
        "#pushButton_7{\n"
        "    background-color: rgb(255, 255, 255);\n"
        "    color: rgb(37, 84, 255);}\n"
        "#pushButton_8{\n"
        "    background-color: rgb(255, 255, 255);\n"
        "    color: rgb(37, 84, 255);}\n"
        "#pushButton_9{\n"
        "    background-color: rgb(255, 255, 255);\n"
        "    color: rgb(37, 84, 255);}\n"
        "#pushButton_Clear{\n"
        "    background-color: rgb(255, 255, 255);\n"
        "    color: rgb(37, 84, 255);}\n"
        "#pushButton_Fixed{\n"
        "    background-color: rgb(255, 255, 255);\n"
        "    color: rgb(37, 84, 255);}\n"
        "\n"
        "#pushButton_Start{\n"
        "    background-color: rgb(13, 197, 90);}\n"
        "#pushButton_Stop{\n"
        "    background-color: rgb(255, 51, 51);}\n"
        "\n"
        "#pushButton_Cancel{\n"
        "    background-color: rgb(255, 51, 51);}\n"
        "\n"
        "#pushButton_ipCustom{\n"
        "    background-color: rgb(255, 82, 91);}\n"
        "#pushButton_ipOwner{\n"
        "    background-color: rgb(255, 82, 91);}\n"
        "\n"
        "#pushButton_Price{\n"
        "    background-color: rgb(255, 255, 255);\n"
        "    color: rgb(37, 84, 255);}\n"
        "\n"
        "#pushButton_Stock{\n"
        "    background-color: rgb(255, 255, 255);\n"
        "    color: rgb(37, 84, 255);}\n"
        "\n"
        "#pushButton_Ntop{\n"
        "    background-color: rgb(37, 84, 255);}\n"
        "#pushButton_Nbottom{\n"
        "    background-color: rgb(169, 255, 112);}\n"
        "#pushButton_Del{\n"
        "    background-color: rgb(255, 51, 51);}\n"
        "\n"
        "#pushButton_Square{\n"
        "    background-color: rgb(255, 255, 255);}\n"
        "#pushButton_Wavy{\n"
        "    background-color: rgb(255, 255, 255);}")
        Table = self  # Save Self main หลักๆ
        self.centralwidget = QtWidgets.QWidget(MainPage)
        self.centralwidget.setObjectName("centralwidget")
        self.frame_Top = QtWidgets.QFrame(self.centralwidget)
        self.frame_Top.setGeometry(QtCore.QRect(0, 0, 1291, 161))
        self.frame_Top.setStyleSheet("background-color: rgb(254, 255, 178);")
        self.frame_Top.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_Top.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_Top.setObjectName("frame_Top")
        self.label_RMUTL = QtWidgets.QLabel(self.frame_Top)
        self.label_RMUTL.setGeometry(QtCore.QRect(100, 0, 90, 160))
        self.label_RMUTL.setText("")
        self.label_RMUTL.setPixmap(QtGui.QPixmap(
            "/home/pi/Desktop/New folder/MyGuiProjestCPE/GuiPythonCode/Image/ตราประจำมหาวิทยาลัยเทคโนโลยีราชมงคลล้านนา-removebg-preview.png"))
        self.label_RMUTL.setScaledContents(True)
        self.label_RMUTL.setAlignment(QtCore.Qt.AlignCenter)
        self.label_RMUTL.setObjectName("label_RMUTL")
        self.label_Name = QtWidgets.QLabel(self.frame_Top)
        self.label_Name.setGeometry(QtCore.QRect(480, 40, 311, 91))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(48)
        font.setBold(True)
        font.setWeight(75)
        self.label_Name.setFont(font)
        self.label_Name.setObjectName("label_Name")
        self.pushButton_Wavy = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Wavy.setGeometry(QtCore.QRect(170, 220, 100, 100))
        self.pushButton_Wavy.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_Wavy.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("/home/pi/Desktop/New folder/MyGuiProjestCPE/GuiPythonCode/Image/Wavy model.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_Wavy.setIcon(icon)
        self.pushButton_Wavy.setIconSize(QtCore.QSize(100, 100))
        self.pushButton_Wavy.setFlat(False)
        self.pushButton_Wavy.setObjectName("pushButton_Wavy")
        self.pushButton_Square = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Square.setGeometry(QtCore.QRect(30, 220, 100, 100))
        self.pushButton_Square.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_Square.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("/home/pi/Desktop/New folder/MyGuiProjestCPE/GuiPythonCode/Image/Square model.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_Square.setIcon(icon1)
        self.pushButton_Square.setIconSize(QtCore.QSize(100, 100))
        self.pushButton_Square.setFlat(False)
        self.pushButton_Square.setObjectName("pushButton_Square")
        self.label_model = QtWidgets.QLabel(self.centralwidget)
        self.label_model.setGeometry(QtCore.QRect(100, 180, 91, 31))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(20)
        self.label_model.setFont(font)
        self.label_model.setStyleSheet("background-color: rgb(255, 170, 255);")
        self.label_model.setAlignment(QtCore.Qt.AlignCenter)
        self.label_model.setObjectName("label_model")

        self.label_wight = QtWidgets.QLabel(self.centralwidget)
        self.label_wight.setGeometry(QtCore.QRect(110, 340, 81, 41))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(20)
        self.label_wight.setFont(font)
        self.label_wight.setStyleSheet("background-color: rgb(255, 170, 255);")
        self.label_wight.setAlignment(QtCore.Qt.AlignCenter)
        self.label_wight.setObjectName("label_wight")

        self.lineEdit_wight = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_wight.setGeometry(QtCore.QRect(50, 390, 191, 41))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        self.lineEdit_wight.setFont(font)
        self.lineEdit_wight.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.lineEdit_wight.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.lineEdit_wight.setObjectName("lineEdit_wight")

        self.pushButton_1 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_1.setGeometry(QtCore.QRect(50, 450, 60, 60))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_1.setFont(font)
        self.pushButton_1.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_1.setStyleSheet("")
        self.pushButton_1.setFlat(False)
        self.pushButton_1.setObjectName("pushButton_1")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(115, 450, 60, 60))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_2.setFlat(False)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(180, 450, 60, 60))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_3.setFlat(False)
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(50, 515, 60, 60))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_4.setFlat(False)
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(115, 515, 60, 60))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_5.setFlat(False)
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(180, 515, 60, 60))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_6.setFont(font)
        self.pushButton_6.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_6.setFlat(False)
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(50, 580, 60, 60))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_7.setFlat(False)
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(115, 580, 60, 60))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_8.setFont(font)
        self.pushButton_8.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_8.setFlat(False)
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_9 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_9.setGeometry(QtCore.QRect(180, 580, 60, 60))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_9.setFont(font)
        self.pushButton_9.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_9.setFlat(False)
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_0 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_0.setGeometry(QtCore.QRect(115, 645, 60, 60))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.pushButton_0.setFont(font)
        self.pushButton_0.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_0.setFlat(False)
        self.pushButton_0.setObjectName("pushButton_0")
        self.pushButton_Clear = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Clear.setGeometry(QtCore.QRect(180, 645, 60, 60))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Clear.setFont(font)
        self.pushButton_Clear.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_Clear.setObjectName("pushButton_Clear")

        self.pushButton_Fixed = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Fixed.setGeometry(QtCore.QRect(50, 645, 60, 60))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Fixed.setFont(font)
        self.pushButton_Fixed.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_Fixed.setObjectName("pushButton_Fixed")

        self.label_owner = QtWidgets.QLabel(self.centralwidget)
        self.label_owner.setGeometry(QtCore.QRect(1005, 230, 91, 31))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(20)
        self.label_owner.setFont(font)
        self.label_owner.setStyleSheet("background-color: rgb(255, 170, 255);")
        self.label_owner.setAlignment(QtCore.Qt.AlignCenter)
        self.label_owner.setObjectName("label_owner")

        self.pushButton_Datasell = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Datasell.setGeometry(QtCore.QRect(1035, 160, 160, 41))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Datasell.setFont(font)
        self.pushButton_Datasell.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_Datasell.setObjectName("pushButton_Datasell")

        self.pushButton_Owner = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Owner.setGeometry(QtCore.QRect(880, 160, 160, 41))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Owner.setFont(font)
        self.pushButton_Owner.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_Owner.setObjectName("pushButton_Owner")

        self.pushButton_Option = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Option.setGeometry(QtCore.QRect(1220, 160, 51, 41))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Option.setFont(font)
        self.pushButton_Option.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_Option.setObjectName("pushButton_Option")

        self.pushButton_Start = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Start.setGeometry(QtCore.QRect(10, 730, 100, 40))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Start.setFont(font)
        self.pushButton_Start.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_Start.setObjectName("pushButton_Start")

        self.pushButton_Stop = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Stop.setGeometry(QtCore.QRect(1065, 730, 100, 40))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Stop.setFont(font)
        self.pushButton_Stop.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_Stop.setObjectName("pushButton_Stop")

        self.pushButton_Cancel = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Cancel.setGeometry(QtCore.QRect(1170, 730, 100, 40))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Cancel.setFont(font)
        self.pushButton_Cancel.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_Cancel.setObjectName("pushButton_Cancel")

        self.label_order = QtWidgets.QLabel(self.centralwidget)
        self.label_order.setGeometry(QtCore.QRect(510, 200, 91, 31))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(20)
        self.label_order.setFont(font)
        self.label_order.setStyleSheet("background-color: rgb(255, 170, 255);")
        self.label_order.setAlignment(QtCore.Qt.AlignCenter)
        self.label_order.setObjectName("label_order")

        # -------- Multi label ShowQ ------ #
        self.label_showQ_name = QtWidgets.QLabel(self.centralwidget)
        self.label_showQ_name.setGeometry(QtCore.QRect(350, 240, 101, 31))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_showQ_name.setFont(font)
        self.label_showQ_name.setStyleSheet("background-color: rgb(255, 255, 255);"
                                            "border-top : 1px solid rgb(122, 122, 122);"
                                            "border-bottom: 1px solid rgb(122, 122, 122);"
                                            "border-left: 1px solid rgb(122, 122, 122);")
        self.label_showQ_name.setFrameShadow(QtWidgets.QFrame.Plain)
        self.label_showQ_name.setLineWidth(1)
        self.label_showQ_name.setText("")
        self.label_showQ_name.setAlignment(QtCore.Qt.AlignCenter)
        self.label_showQ_name.setObjectName("label_showQ_name")

        self.label_showQ_lastname = QtWidgets.QLabel(self.centralwidget)
        self.label_showQ_lastname.setGeometry(QtCore.QRect(450, 240, 101, 31))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_showQ_lastname.setFont(font)
        self.label_showQ_lastname.setStyleSheet("background-color: rgb(255, 255, 255);"
                                            "border-top : 1px solid rgb(122, 122, 122);"
                                            "border-bottom: 1px solid rgb(122, 122, 122);")
        self.label_showQ_lastname.setFrameShadow(QtWidgets.QFrame.Plain)
        self.label_showQ_lastname.setLineWidth(1)
        self.label_showQ_lastname.setText("")
        self.label_showQ_lastname.setAlignment(QtCore.Qt.AlignCenter)
        self.label_showQ_lastname.setObjectName("label_showQ_lastname")

        self.label_showQ_model = QtWidgets.QLabel(self.centralwidget)
        self.label_showQ_model.setGeometry(QtCore.QRect(550, 240, 101, 31))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_showQ_model.setFont(font)
        self.label_showQ_model.setStyleSheet("background-color: rgb(255, 255, 255);"
                                            "border-top : 1px solid rgb(122, 122, 122);"
                                            "border-bottom: 1px solid rgb(122, 122, 122);")
        self.label_showQ_model.setFrameShadow(QtWidgets.QFrame.Plain)
        self.label_showQ_model.setLineWidth(1)
        self.label_showQ_model.setText("")
        self.label_showQ_model.setAlignment(QtCore.Qt.AlignCenter)
        self.label_showQ_model.setObjectName("label_showQ_model")

        self.label_showQ_weight = QtWidgets.QLabel(self.centralwidget)
        self.label_showQ_weight.setGeometry(QtCore.QRect(650, 240, 121, 31))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_showQ_weight.setFont(font)
        self.label_showQ_weight.setStyleSheet("background-color: rgb(255, 255, 255);"
                                            "border-top : 1px solid rgb(122, 122, 122);"
                                            "border-bottom: 1px solid rgb(122, 122, 122);"
                                            "border-right: 1px solid rgb(122, 122, 122);")
        self.label_showQ_weight.setFrameShadow(QtWidgets.QFrame.Plain)
        self.label_showQ_weight.setLineWidth(1)
        self.label_showQ_weight.setText("")
        self.label_showQ_weight.setAlignment(QtCore.Qt.AlignCenter)
        self.label_showQ_weight.setObjectName("label_showQ_weight")
        # ----------------------------------#

        self.pushButton_Price = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Price.setGeometry(QtCore.QRect(350, 640, 140, 60))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Price.setFont(font)
        self.pushButton_Price.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_Price.setObjectName("pushButton_Price")

        self.pushButton_Stock = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Stock.setGeometry(QtCore.QRect(500, 640, 60, 60))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Stock.setFont(font)
        self.pushButton_Stock.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_Stock.setObjectName("pushButton_Stock")

        self.pushButton_Ntop = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Ntop.setGeometry(QtCore.QRect(570, 640, 60, 60))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Ntop.setFont(font)
        self.pushButton_Ntop.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_Ntop.setObjectName("pushButton_Ntop")

        self.pushButton_Nbottom = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Nbottom.setGeometry(QtCore.QRect(640, 640, 60, 60))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Nbottom.setFont(font)
        self.pushButton_Nbottom.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_Nbottom.setObjectName("pushButton_Nbottom")

        self.pushButton_Del = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Del.setGeometry(QtCore.QRect(710, 640, 60, 60))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Del.setFont(font)
        self.pushButton_Del.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_Del.setObjectName("pushButton_Del")

        self.pushButton_ipCustom = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_ipCustom.setGeometry(QtCore.QRect(280, 380, 60, 60))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_ipCustom.setFont(font)
        self.pushButton_ipCustom.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_ipCustom.setObjectName("pushButton_ipCustom")

        self.pushButton_ipOwner = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_ipOwner.setGeometry(QtCore.QRect(780, 390, 60, 60))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_ipOwner.setFont(font)
        self.pushButton_ipOwner.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_ipOwner.setObjectName("pushButton_ipOwner")


        self.tableOwner_main = QtWidgets.QTableWidget(self.centralwidget)
        self.tableOwner_main.setGeometry(QtCore.QRect(850, 280, 411, 421))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(14)
        self.tableOwner_main.setFont(font)
        self.tableOwner_main.setFocusPolicy(QtCore.Qt.NoFocus)
        self.tableOwner_main.setAutoScrollMargin(16)
        self.tableOwner_main.setObjectName("tableOwner_main")
        self.tableOwner_main.setColumnCount(4)
        self.tableOwner_main.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableOwner_main.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableOwner_main.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableOwner_main.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableOwner_main.setHorizontalHeaderItem(3, item)
        self.tableOwner_main.horizontalHeader().setDefaultSectionSize(100)
        self.tableOwner_main.horizontalHeader().setMinimumSectionSize(39)
        self.tableOwner_main.horizontalHeader().setSortIndicatorShown(False)
        self.tableOwner_main.horizontalHeader().setStretchLastSection(True)
        self.tableOwner_main.verticalHeader().setDefaultSectionSize(40)

        self.tableOrder_main = QtWidgets.QTableWidget(self.centralwidget)
        self.tableOrder_main.setGeometry(QtCore.QRect(350, 280, 421, 351))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(14)
        self.tableOrder_main.setFont(font)
        self.tableOrder_main.setFocusPolicy(QtCore.Qt.NoFocus)
        self.tableOrder_main.setObjectName("tableOrder_main")
        self.tableOrder_main.setColumnCount(4)
        self.tableOrder_main.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableOrder_main.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableOrder_main.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableOrder_main.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableOrder_main.setHorizontalHeaderItem(3, item)
        self.tableOrder_main.horizontalHeader().setDefaultSectionSize(100)
        self.tableOrder_main.horizontalHeader().setMinimumSectionSize(50)
        self.tableOrder_main.horizontalHeader().setStretchLastSection(True)
        self.tableOrder_main.verticalHeader().setDefaultSectionSize(40)

        self.pushButton_Retable = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Retable.setGeometry(QtCore.QRect(1210, 220, 61, 51))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Retable.setFont(font)
        self.pushButton_Retable.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_Retable.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("/home/pi/Desktop/New folder/MyGuiProjestCPE/GuiPythonCode/Image/retable_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_Retable.setIcon(icon2)
        self.pushButton_Retable.setIconSize(QtCore.QSize(40, 60))
        self.pushButton_Retable.setFlat(True)
        self.pushButton_Retable.setObjectName("pushButton_Retable")

        self.pushButton_Searchtable = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Searchtable.setGeometry(QtCore.QRect(1160, 220, 61, 51))
        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Searchtable.setFont(font)
        self.pushButton_Searchtable.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_Searchtable.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("/home/pi/Desktop/New folder/MyGuiProjestCPE/GuiPythonCode/Image/search_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_Searchtable.setIcon(icon2)
        self.pushButton_Searchtable.setIconSize(QtCore.QSize(40, 60))
        self.pushButton_Searchtable.setFlat(True)
        self.pushButton_Searchtable.setObjectName("pushButton_Searchtable")

        self.progressbar = QProgressBar(self.centralwidget)
        self.progressbar.setGeometry(120, 730, 960, 40)
        self.progressbar.setMaximum(100)
        self.progressbar.setValue(0)

        MainPage.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainPage)
        self.statusbar.setObjectName("statusbar")
        MainPage.setStatusBar(self.statusbar)

        self.retranslateUi(MainPage)
        QtCore.QMetaObject.connectSlotsByName(MainPage)

        # Select all Row
        self.tableOwner_main.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tableOrder_main.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)

    def retranslateUi(self, MainPage):
        _translate = QtCore.QCoreApplication.translate
        MainPage.setWindowTitle(_translate("MainPage", "MainPage"))
        self.label_Name.setText(_translate("Mai  nPage", "เครื่องตัดเฉาก๊วย"))
        self.label_model.setText(_translate("MainPage", "แบบแม่พิมพ์"))
        self.label_wight.setText(_translate("MainPage", "น้ำหนัก"))
        self.pushButton_1.setText(_translate("MainPage", "1"))
        self.pushButton_2.setText(_translate("MainPage", "2"))
        self.pushButton_3.setText(_translate("MainPage", "3"))
        self.pushButton_4.setText(_translate("MainPage", "4"))
        self.pushButton_5.setText(_translate("MainPage", "5"))
        self.pushButton_6.setText(_translate("MainPage", "6"))
        self.pushButton_7.setText(_translate("MainPage", "7"))
        self.pushButton_8.setText(_translate("MainPage", "8"))
        self.pushButton_9.setText(_translate("MainPage", "9"))
        self.pushButton_0.setText(_translate("MainPage", "0"))
        self.pushButton_Clear.setText(_translate("MainPage", "C"))
        self.pushButton_Fixed.setText(_translate("MainPage", "Weight"))
        item = self.tableOwner_main.horizontalHeaderItem(0)
        item.setText(_translate("MainPage", "ชื่อ"))
        item = self.tableOwner_main.horizontalHeaderItem(1)
        item.setText(_translate("MainPage", "นามสกุล"))
        item = self.tableOwner_main.horizontalHeaderItem(2)
        item.setText(_translate("MainPage", "แบบพิมพ์"))
        item = self.tableOwner_main.horizontalHeaderItem(3)
        item.setText(_translate("MainPage", "น้ำหนัก"))
        self.label_owner.setText(_translate("MainPage", "ลูกค้าประจำ"))
        self.pushButton_Datasell.setText(_translate("MainPage", "ข้อมูลการขาย"))
        self.pushButton_Owner.setText(_translate("MainPage", "ลูกค้าประจำ"))
        self.pushButton_Option.setText(_translate("MainPage", "ตั้งค่า"))
        self.pushButton_Stop.setText(_translate("MainPage", "หยุด"))
        self.pushButton_Cancel.setText(_translate("MainPage", "ยกเลิก"))
        self.pushButton_Start.setText(_translate("MainPage", "เริ่ม"))
        self.label_order.setText(_translate("MainPage", "คิวออเดอร์"))
        self.pushButton_ipCustom.setText(_translate("MainPage", ">"))
        self.pushButton_ipOwner.setText(_translate("MainPage", "<"))
        item = self.tableOrder_main.horizontalHeaderItem(0)
        item.setText(_translate("MainPage", "ชื่อ"))
        item = self.tableOrder_main.horizontalHeaderItem(1)
        item.setText(_translate("MainPage", "นามสกุล"))
        item = self.tableOrder_main.horizontalHeaderItem(2)
        item.setText(_translate("MainPage", "แบบแม่พิมพ์"))
        item = self.tableOrder_main.horizontalHeaderItem(3)
        item.setText(_translate("MainPage", "น้ำหนัก"))
        self.pushButton_Price.setText(_translate("MainPage", "ราคา : " + Price_Square + "/" + Price_Wavy))
        self.pushButton_Stock.setText(_translate("MainPage", "คลัง"))
        self.pushButton_Ntop.setText(_translate("MainPage", "^"))
        self.pushButton_Nbottom.setText(_translate("MainPage", "v"))
        self.pushButton_Del.setText(_translate("MainPage", "ลบ"))


        # Action Code
        # *-------ปุ่มเปลี่ยนหน้า-------* #
        self.pushButton_Owner.clicked.connect(self.OpenOwnerpage)
        self.pushButton_Datasell.clicked.connect(self.OpenDataSellpage)
        self.pushButton_Option.clicked.connect(self.OpenOptionpage)

        # *-------โหลดTable--------* #
        self.LoadDataTableOwner()
        self.LoadDataTableQorder()

        # *-------Re_TableOwner--------* #
        self.pushButton_Retable.clicked.connect(self.ReTableOwner)

        # *-------Search_TableOwner--------* #
        self.pushButton_Searchtable.clicked.connect(self.SearchTableOwner)

        # *------ปุ่มตัวเลข--------* #
        self.pushButton_0.clicked.connect(lambda :self.NumWeight("0"))
        self.pushButton_1.clicked.connect(lambda :self.NumWeight("1"))
        self.pushButton_2.clicked.connect(lambda :self.NumWeight("2"))
        self.pushButton_3.clicked.connect(lambda :self.NumWeight("3"))
        self.pushButton_4.clicked.connect(lambda :self.NumWeight("4"))
        self.pushButton_5.clicked.connect(lambda :self.NumWeight("5"))
        self.pushButton_6.clicked.connect(lambda :self.NumWeight("6"))
        self.pushButton_7.clicked.connect(lambda :self.NumWeight("7"))
        self.pushButton_8.clicked.connect(lambda :self.NumWeight("8"))
        self.pushButton_9.clicked.connect(lambda :self.NumWeight("9"))
        self.pushButton_Clear.clicked.connect(lambda :self.NumWeight("C"))
        self.pushButton_Fixed.clicked.connect(self.InputWeightFixed)

        # *----ปุ่มกดเลือกแม่แบบ-----* #
        self.pushButton_Square.setCheckable(True)
        self.pushButton_Square.setChecked(False)
        self.pushButton_Square.clicked.connect(self.Squarebtn)
        self.pushButton_Wavy.setCheckable(True)
        self.pushButton_Wavy.setChecked(False)
        self.pushButton_Wavy.clicked.connect(self.Wavybtn)

        # *----ปุ่มการทำงาน--------* #
        self.pushButton_ipCustom.clicked.connect(self.InputCustom)
        self.pushButton_ipOwner.clicked.connect(self.InputOwner)
        self.pushButton_Price.clicked.connect(self.InputPrice)
        self.pushButton_Stock.clicked.connect(self.Stockbtn)
        self.pushButton_Ntop.clicked.connect(self.NextTop)
        self.pushButton_Nbottom.clicked.connect(self.NextBottom)
        self.pushButton_Del.clicked.connect(self.DeleteQ)

        # *----ปุ่มเริ่มกับหยุดเครื่อง----* #
        self.pushButton_Start.clicked.connect(self.Startbtn)
        self.pushButton_Stop.clicked.connect(lambda:self.Stopbtn(1))
        self.pushButton_Cancel.clicked.connect(self.Cancelbtn)

        # *---- Loadbar ----* #
        self.timer = QTimer()
        self.timer.timeout.connect(self.Increase_Step)


    def LoadDataTableOwner(self):   #โหลดหน้าต่างลูกค้าประจำ
        cnx.connect()
        cur.execute("SELECT Username, Lastname, Model, Weight FROM ownerpage ")
        # -------------------- Load Data raw Material *----------------#
        result = cur.fetchall()
        self.tableOwner_main.setRowCount(0)
        # self.tb_raw_material.setColumnCount(6)
        Owner_N.clear()
        for row_number, row_data in enumerate(result):
            print(row_number)
            self.tableOwner_main.insertRow(row_number)

            for column_number, data in enumerate(row_data):
                print(column_number)

                item = QtWidgets.QTableWidgetItem(str(data))
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                self.tableOwner_main.setItem(row_number, column_number, item)
                Owner_N.append([])
                Owner_N[row_number].append(str(data))
                print(Owner_N[row_number])
        # -------------------------------------------------------------#

    def LoadDataTableQorder(self):  #โหลดหน้าต่างคิวออเดอร์
        cnx.connect()
        cur.execute("SELECT Username, Lastname, Model, Weight FROM qorderpage ")
        # -------------------- Load Data raw Material *----------------#
        result = cur.fetchall()
        self.tableOrder_main.setRowCount(0)
        # self.tb_raw_material.setColumnCount(6)
        QOrder_N.clear()
        for row_number, row_data in enumerate(result):
            print(row_number)
            self.tableOrder_main.insertRow(row_number)

            for column_number, data in enumerate(row_data):
                print(column_number)

                item = QtWidgets.QTableWidgetItem(str(data))
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                self.tableOrder_main.setItem(row_number, column_number, item)
                QOrder_N.append([])
                QOrder_N[row_number].append(str(data))
                print(QOrder_N[row_number])
        # -------------------------------------------------------------#

    def OpenOwnerpage(self):    #เปิดหน้าต่างลูกค้าประจำ
        self.OwnerPage = QtWidgets.QMainWindow()
        self.ui = Ui_OwnerPage()
        self.ui.setupUi(self.OwnerPage)
        self.OwnerPage.show()

    def OpenDataSellpage(self): #เปิดหน้าต่างข้อมูลการขาย
        self.DatasellPage = QtWidgets.QMainWindow()
        self.ui = Ui_DatasellPage()
        self.ui.setupUi(self.DatasellPage)
        self.DatasellPage.show()

    def OpenOptionpage(self):   #เปิดหน้าต่างตั้งค่า
        self.OptionPage = QtWidgets.QMainWindow()
        self.ui = Ui_OptionPage()
        self.ui.setupUi(self.OptionPage)
        self.OptionPage.show()

    def ReTableOwner(self): #เรียกหน้าต่างต้นหารีเฟรชหน้าต่างลูกค้าประจำ
        global Text_N, Text_L
        Text_N = ""
        Text_L = ""
        Text_P = ""
        Ui_MainPage.LoadDataTableOwner(Table)

    def SearchTableOwner(self): #เรียกหน้าต่างต้นหาลูกค้าประจำ
        global Text_N, Text_L
        print("SEARCH")
        self.Search_TB = Search_Table()
        self.Search_TB.show()

    def CallSearch_btn(self):   #เรียกข้อมูลที่ทำการค้นหา
        global Texts_N, Texts_L
        print(Texts_N, Texts_L)
        if Texts_N == "" or Texts_L == "":
            cur.execute(
                "SELECT Username, Lastname, Model, Weight FROM ownerpage WHERE Username='%s' OR Lastname='%s' " % (
                    Texts_N, Texts_L))
            # -------------------- Load Data raw Material *----------------#
            resultOwner = cur.fetchall()
            self.tableOwner_main.setRowCount(0)
            Owner_N.clear()
            for row_number, row_data in enumerate(resultOwner):
                print(row_number)
                self.tableOwner_main.insertRow(row_number)

                for column_number, data in enumerate(row_data):
                    print(column_number)

                    item = QtWidgets.QTableWidgetItem(str(data))
                    item.setTextAlignment(QtCore.Qt.AlignCenter)
                    self.tableOwner_main.setItem(row_number, column_number, item)

                    Owner_N.append([])
                    Owner_N[row_number].append(str(data))
                    print(Owner_N[row_number])
            # ------------------------------------------------------------#
        elif Texts_N != "" and Texts_L != "" :
            cur.execute(
                "SELECT Username, Lastname, Model, Weight FROM ownerpage WHERE Username='%s' AND Lastname='%s' " % (
                    Texts_N, Texts_L))
            # -------------------- Load Data raw Material *----------------#
            resultOwner = cur.fetchall()
            self.tableOwner_main.setRowCount(0)
            Owner_N.clear()
            for row_number, row_data in enumerate(resultOwner):
                print(row_number)
                self.tableOwner_main.insertRow(row_number)

                for column_number, data in enumerate(row_data):
                    print(column_number)

                    item = QtWidgets.QTableWidgetItem(str(data))
                    item.setTextAlignment(QtCore.Qt.AlignCenter)
                    self.tableOwner_main.setItem(row_number, column_number, item)

                    Owner_N.append([])
                    Owner_N[row_number].append(str(data))
                    print(Owner_N[row_number])
            # ------------------------------------------------------------#

    def NumWeight(self, W):     #เพิ่มตัวเลขเข้าสู่ที่กรอกน้ำหนัก
        global Entryweight
        if W != "C":
            Entryweight=Entryweight+W
            self.lineEdit_wight.setText(str(Entryweight))
        else :
            self.lineEdit_wight.clear()
            Entryweight=""

    def Squarebtn(self):    #ปุ่มแบบสี่เหลี่ยม
        global Squaremodel
        if self.pushButton_Square.isChecked() == True:
            self.pushButton_Wavy.setEnabled(False)
            self.pushButton_Wavy.setFlat(True)
            Squaremodel = "Square"
            print(Squaremodel)
        else:
            self.pushButton_Wavy.setEnabled(True)
            self.pushButton_Wavy.setFlat(False)
            Squaremodel = ""
            print(Squaremodel)

    def Wavybtn(self):  #ปุ่มแบบหยัก
        global Wavymodel
        if self.pushButton_Wavy.isChecked() == True:
            self.pushButton_Square.setEnabled(False)
            self.pushButton_Square.setFlat(True)
            Wavymodel = "Wavy"
            print(Wavymodel)
        else:
            self.pushButton_Square.setEnabled(True)
            self.pushButton_Square.setFlat(False)
            Wavymodel = ""
            print(Wavymodel)

    def InputCustom(self):  #เพิ่มข้อมูลลูกค้าแบบกำหนดเองเข้าสู่รายการคิวออเดอร์เพื่อเตรียมเริ่มการทำงาน
        global Entryweight,Squaremodel,Wavymodel
        if Entryweight == "":
            Entryweight = "0" + Entryweight
        Check_Z = lambda z : "0" if (int(z) + 0) == 0  else str(z)
        Check_NumF1 = lambda n: str(int(n)) if n[0] == "0" else str(n)
        print("--------------------------------------------------------------Test Check_Z: ",Check_Z(Entryweight))
        Check_Sqare = Entryweight != "" and Squaremodel != "" and Check_Z(Entryweight) != "0"
        Check_Wavy = Entryweight != "" and Wavymodel != "" and Check_Z(Entryweight) != "0"
        Check_Zero = Check_Z(Entryweight) != "0"
        if Entryweight != "" and Check_Sqare  or Check_Wavy and Check_Zero :
            Usernameq = "Owner"
            Lastnameq = "Custom"
            Models=Squaremodel+Wavymodel
            print("Weight = ",Entryweight,", ModelS = ",Models)
            cur.execute("INSERT INTO qorderpage(Username, Lastname,Model, Weight) VALUES ('%s','%s','%s','%s')"% (Usernameq, Lastnameq, Models, Check_NumF1(Entryweight)))
            cnx.commit()
            if Models == "Square":
                self.pushButton_Square.setCheckable(True)
                self.pushButton_Square.setChecked(False)
                self.pushButton_Wavy.setEnabled(True)
                self.pushButton_Wavy.setFlat(False)
                Squaremodel = ""
            elif Models == "Wavy":
                self.pushButton_Wavy.setCheckable(True)
                self.pushButton_Wavy.setChecked(False)
                self.pushButton_Square.setEnabled(True)
                self.pushButton_Square.setFlat(False)
                Wavymodel = ""
        else:
            msgBox = QtWidgets.QMessageBox()
            msgBox.setWindowTitle("Error")
            msgBox.setText("กรุณาเลือกแบบพิมพ์ และกรอกค่าน้ำหนักให้ครบ")
            msgBox.exec_()
        Entryweight = ""
        self.lineEdit_wight.clear()
        Ui_MainPage.LoadDataTableQorder(Table)

    def InputOwner(self):       #เพิ่มข้อมูลลูกค้าประจำเข้าสู่รายการคิวออเดอร์เพื่อเตรียมเริ่มการทำงาน
        print("Input Owner !")
        rowOwner = self.tableOwner_main.currentRow()
        if rowOwner != -1:
            Username = Owner_N[rowOwner][0]
            Lastname = Owner_N[rowOwner][1]
            Model = Owner_N[rowOwner][2]
            Weight = Owner_N[rowOwner][3]
            cur.execute("INSERT INTO qorderpage(Username, Lastname, Model , Weight) VALUES ('%s','%s','%s','%s')" % (
            Username, Lastname, Model, Weight))
            cnx.commit()
            Ui_MainPage.LoadDataTableQorder(Table)
        else:
            msgBox = QtWidgets.QMessageBox()
            msgBox.setWindowTitle("Error")
            msgBox.setText("กรุณาเลือกข้อมูลในตารางลูกค้าประจำ")
            msgBox.exec_()

    def NextTop(self):     #เลื่อนรายการที่เลือกขึ้นข้างบน
        rowUser = self.tableOrder_main.currentRow()
        print("rowUser = ", rowUser, "| rowUserN = ", rowUser - 1)
        cur.execute("SELECT ID, Username, Lastname, Model, Weight FROM qorderpage")
        orderq = cur.fetchall()
        if orderq != []:
            if rowUser != 0 and rowUser != -1:
                Username = orderq[rowUser][1]
                Lastname = orderq[rowUser][2]
                Model = orderq[rowUser][3]
                Weight = orderq[rowUser][4]

                Username_N = orderq[rowUser - 1][1]
                Lastname_N = orderq[rowUser - 1][2]
                Model_N = orderq[rowUser - 1][3]
                Weight_N = orderq[rowUser - 1][4]

                ID_N = orderq[rowUser - 1][0]
                ID = orderq[rowUser][0]

                cur.execute("UPDATE qorderpage SET  Username='%s', Lastname='%s', Model='%s', Weight='%s' WHERE ID='%s'" % (
                Username, Lastname, Model, Weight, ID_N))
                cur.execute("UPDATE qorderpage SET  Username='%s', Lastname='%s', Model='%s', Weight='%s' WHERE ID='%s'" % (
                Username_N, Lastname_N, Model_N, Weight_N, ID))
                cnx.commit()
                Ui_MainPage.LoadDataTableQorder(Table)
            elif rowUser == 0:
                msgBox = QtWidgets.QMessageBox()
                msgBox.setWindowTitle("Error")
                msgBox.setText("ข้อมูลอยู่บนสุดแล้ว")
                msgBox.exec_()
            elif rowUser == -1:
                msgBox = QtWidgets.QMessageBox()
                msgBox.setWindowTitle("Error")
                msgBox.setText("กรุณาเลือกข้อมูลในตารางลูกค้าประจำ")
                msgBox.exec_()
        else:
            msgBox = QtWidgets.QMessageBox()
            msgBox.setWindowTitle("Error")
            msgBox.setText("ไม่พบข้อมูลในคิวออเดอร์")
            msgBox.exec_()

    def NextBottom(self):   #เลื่อนรายการที่เลือกลงข้างล่าง
        rowUser = self.tableOrder_main.currentRow()
        print("rowUser = ", rowUser, "| rowUserN = ", rowUser + 1)

        cur.execute("SELECT * FROM qorderpage ORDER BY ID DESC;")
        rowUser_Max=cur.fetchall()
        cur.execute("SELECT ID, Username, Lastname, Model, Weight FROM qorderpage")
        orderq = cur.fetchall()
        if orderq != []:
            print("Orderq = ",orderq[rowUser][0],"RowUser Max = ",rowUser_Max[0][0])
            if orderq[rowUser][0] != rowUser_Max[0][0] and rowUser != -1:
                Username = orderq[rowUser][1]
                Lastname = orderq[rowUser][2]
                Model = orderq[rowUser][3]
                Weight = orderq[rowUser][4]

                Username_N = orderq[rowUser + 1][1]
                Lastname_N = orderq[rowUser + 1][2]
                Model_N = orderq[rowUser + 1][3]
                Weight_N = orderq[rowUser + 1][4]

                ID_N = orderq[rowUser + 1][0]
                ID = orderq[rowUser][0]
                cur.execute("UPDATE qorderpage SET  Username='%s', Lastname='%s', Model='%s', Weight='%s' WHERE ID='%s'" % (
                Username, Lastname, Model, Weight, ID_N))
                cur.execute("UPDATE qorderpage SET  Username='%s', Lastname='%s', Model='%s', Weight='%s' WHERE ID='%s'" % (
                Username_N, Lastname_N, Model_N, Weight_N, ID))
                cnx.commit()
                Ui_MainPage.LoadDataTableQorder(Table)
            elif rowUser == -1 :
                msgBox = QtWidgets.QMessageBox()
                msgBox.setWindowTitle("Error")
                msgBox.setText("กรุณาเลือกข้อมูลในตารางลูกค้าประจำ")
                msgBox.exec_()
            elif orderq[rowUser][0] == rowUser_Max[0][0] :
                msgBox = QtWidgets.QMessageBox()
                msgBox.setWindowTitle("Error")
                msgBox.setText("ข้อมูลอยู่ล่างสุดแล้ว")
                msgBox.exec_()
        else:
            msgBox = QtWidgets.QMessageBox()
            msgBox.setWindowTitle("Error")
            msgBox.setText("ไม่พบข้อมูลในคิวออเดอร์")
            msgBox.exec_()

    def DeleteQ(self):      #ลบรายการที่เลือก
        print("Delete Q !")
        rowUser = self.tableOrder_main.currentRow()
        print("rowUser = ", rowUser)
        cur.execute("SELECT ID, Username, Lastname, Model, Weight FROM qorderpage")
        orderq = cur.fetchall()
        if orderq != []:
            if rowUser != -1:
                print("OrderQ Row = ", orderq[rowUser])
                orderqID = orderq[rowUser][0]
                print(orderqID)
                cnx.connect()
                cur.execute("DELETE FROM qorderpage WHERE ID='%s'" % (orderqID))
                cnx.commit()
                Ui_MainPage.LoadDataTableQorder(Table)
            else:
                msgBox = QtWidgets.QMessageBox()
                msgBox.setWindowTitle("Error")
                msgBox.setText("กรุณาเลือกข้อมูลที่จะลบ")
                msgBox.exec_()
        else:
            msgBox = QtWidgets.QMessageBox()
            msgBox.setWindowTitle("Error")
            msgBox.setText("ไม่พบข้อมูลในคิวออเดอร์")
            msgBox.exec_()

    def Increase_Step(self):        #การกระทำเมื่อหลอดโหลดบาร์หรือสเตตัสบาร์ถึงเงื่อนไขที่กำหนด
        
        global DataOwner,Check_btn
        valuenow = self.progressbar.value()
        if valuenow != 100:
            mycursor = cnx.cursor()
            mycursor.execute("SELECT berstatus FROM loadcell")
            myresult = mycursor.fetchall()
            N = myresult [0][:1][0]
            cnx.connect()
            print('status',N)
            if N ==0:
                self.progressbar.setValue(self.progressbar.value() + 0)
                cur.execute("UPDATE loadcell SET berstatus = '1'")
                cnx.commit()
            if N ==2:
                self.progressbar.setValue(self.progressbar.value() + 10) #เพิ่มค่าหลอดโหลดบาร์+10
                cur.execute("UPDATE loadcell SET berstatus = '1'")
                cnx.commit()
            if N ==3:
                self.progressbar.setValue(self.progressbar.value() + 50)
                cur.execute("UPDATE loadcell SET berstatus = '1'")
                cnx.commit()
            if N==4:
                self.progressbar.setValue(self.progressbar.value() + 40)
                cur.execute("UPDATE loadcell SET berstatus = '0'")
                cnx.commit()
            else:
                print('ดำเนินการ')
                
            
        if valuenow == 100:#ถ้าสเตตัสบาร์เต็ม100ทำการเพิ่มข้อมูลเข้าสู่หน้าDatasell
            self.progressbar.setValue(0)
            self.timer.stop()
            # ------Clear Data in label_showQ---#
            self.label_showQ_name.clear()
            self.label_showQ_lastname.clear()
            self.label_showQ_model.clear()
            self.label_showQ_weight.clear()
            # ---------------------------------#
            # ------------ การเพิ่มข้อมูลลงหน้าต่าง Datasell ----------------------------------------#
            ID_N = DataOwner[0]
            Date_N = DataOwner[1]
            Time_N = DataOwner[2]
            Username_N = DataOwner[3]
            Lastname_N = DataOwner[4]
            Model_N = DataOwner[5]
            Weight_N = DataOwner[6]
            Price_N = DataOwner[7]
            print(ID_N, Date_N, Time_N, Username_N, Lastname_N, Model_N, Weight_N, Price_N)
            cur.execute(
                "INSERT INTO datasellpage(Date, Time, Username, Lastname, Model ,Weight ,Price) VALUES ('%s','%s','%s','%s','%s','%s','%s')" % (
                    Date_N, Time_N, Username_N, Lastname_N, Model_N, Weight_N, Price_N))
            cnx.commit()
            DataOwner = []
            Check_btn = "Start"
            # -----------------------------------------------------------------------------------#
            
        

    def Startbtn(self):     #เริ่มกระบวนการทำงาน
        global Price_Square,Price_Wavy,SquareW,WavyW,Check_btn,DataOwner
        cur.execute("SELECT ID, Username, Lastname, Model, Weight FROM qorderpage")
        orderq = cur.fetchall()
        mycursor = cnx.cursor()
        mycursor.execute("SELECT Motor FROM STOP")
        myresult = mycursor.fetchall()
        m = myresult [0][:1][0]
        mycursor = cnx.cursor()
        mycursor.execute("SELECT num FROM STOP")
        myresult = mycursor.fetchall()
        num = myresult [0][:1][0]
        cnx.connect
        if orderq != [] or DataOwner != []:
            if Check_btn == "Start":        #เช็คจาก Check_btn หากได้เป็น Start แปลว่ากดเริ่มครั้งแรก
                print("Start !!!")
                print(Check_btn)
                #----------------------------------ตำสั่งเริ่มให้คำชุดคำสั่งคอนโทรน-----------#
                if m == 0:
                    if num == 0:
                        cur.execute("UPDATE STOP SET stsp  = '1'")
                        cnx.commit()
                        print('ส่ง1')
                        cur.execute("UPDATE STOP SET Motor  = '1'")
                        cnx.commit()
                        print('เริ่มขั้นตอนที่1')
                        cur.execute("UPDATE STOP SET contro  = '1'")
                        cnx.commit()
                        cur.execute("UPDATE STOP SET num  = '1'")
                        cnx.commit()
                #---------------------------------------------------------------#
                # ------------การเพิ่มข้อมูลลงหน้าต่าง Datasell และลบข้อมูลในหน้าต่าง Qorder----------------------#
                orderq_N = orderq[0]  # ID
                dt_N = dt.datetime.now()
                Date_N = str(dt_N.strftime("%d/%m/%Y"))
                Time_N = str(dt_N.strftime("%X"))
                cnx.connect()
                ID_N = orderq_N[0]
                Username_N = orderq_N[1]
                Lastname_N = orderq_N[2]
                Model_N = orderq_N[3]
                Weight_N = orderq_N[4]

                self.label_showQ_name.setText(Username_N)
                self.label_showQ_lastname.setText(Lastname_N)
                self.label_showQ_model.setText(Model_N)
                self.label_showQ_weight.setText(Weight_N)

                # --------- แยกน้ำหนัก Square Wavy ---------------#
                SquareW = "0"   #ตัวแปรที่ใช้นำมาเก็บค่าน้ำหนักแบบสี่เหลี่ยม
                WavyW = "0"     #ตัวแปรที่ใช้นำมาเก็บค่าน้ำหนักแบบหยัก
                if Model_N == "Square":
                    SquareW = Weight_N
                    print("Model = ", Model_N)
                elif Model_N == "Wavy":
                    WavyW=Weight_N
                    print("Model = ", Model_N)
                else:
                    for r in range(len(Weight_N)):
                        if r < Weight_N.find('/'):
                            SquareW = SquareW + Weight_N[r]
                        elif r > Weight_N.find('/'):
                            WavyW = WavyW + Weight_N[r]
                    print("r = ", r, "Square = ", SquareW, "Wavy = ", WavyW)
                # ----------------------------------------------#
                SquareW = int(SquareW)      #ตัวแปรที่ใช้นำมาเก็บค่าน้ำหนักแบบสี่เหลี่ยม
                WavyW = int(WavyW)          #ตัวแปรที่ใช้นำมาเก็บค่าน้ำหนักแบบหยัก
                self.timer.start(1000)
                Price_N = ((SquareW * int(Price_Square))+(WavyW * int(Price_Wavy)))   # นำค่าน้ำหนักที่แยกได้มาคูณกับราคาพื้นฐานแล้วเก็บไว้
                DataOwner = [ID_N,Date_N,Time_N,Username_N,Lastname_N,Model_N,Weight_N,Price_N]     #DataOwner = ตัวแปรที่เก็บข้อมูลทั้งหมดไว้เพื่อเตรียมนำไปใส่ในหน้าข้อมูลการขายเมื่อสเตตัสบาร์เต็ม100
                print(DataOwner)
                cur.execute("DELETE FROM qorderpage WHERE ID='%s'" % (ID_N))#ลบข้อมูลออกจากหน้าต่างรายการคิวออเดอร์เพราะนำข้อมูลไปเก็บไว้ที่ตัวแปรDataOwnerแล้ว
                cur.execute("INSERT INTO qdataownerpage(ID,model,weight)VALUES ('%s','%s','%s')"%(ID_N,Model_N,Weight_N))
                cnx.commit()
                Ui_MainPage.LoadDataTableQorder(Table)
                # -----------------------------------------------------------------------------------#
            else:
                msgBox = QtWidgets.QMessageBox()
                msgBox.setWindowTitle("Error")
                msgBox.setText("ยังทำรายการไม่เสร็จ กรุณารอ")
                msgBox.exec_()
        else:
            msgBox = QtWidgets.QMessageBox()
            msgBox.setWindowTitle("Error")
            msgBox.setText("ไม่พบข้อมูลในคิวออเดอร์")
            msgBox.exec_()
    
    def Stopbtn(self,num):      #เรียกหน้าต่างตัวเลือกหยุดการทำงาน
        global Price_Square,Price_Wavy,SquareW,WavyW,Check_btn
        cur.execute("SELECT ID, Username, Lastname, Model, Weight FROM qorderpage")
        orderq = cur.fetchall()
        valuenow = self.progressbar.value()
        #-----------------------------------------#
        mycursor = cnx.cursor()
        mycursor.execute("SELECT Motor FROM STOP")
        myresult = mycursor.fetchall()
        m = myresult [0][:1][0]
        cnx.connect
        if (orderq != [] and DataOwner != [] )or valuenow != 0  : #ในหน้าต่างรายการต้องไม่ว่างและในDataOwnerต้องไม่มีข้อมูลหรือค่าของสเตตัสบาร์ต้องไม่เป็นศูนย์ถึงจะทำ
            Check_btn = "Stop"
            print("Square Price : ",Price_Square,"|Wavy Price : ",Price_Wavy,"|SquareW = ",SquareW,"|WayW = ",WavyW)
            print("Stop !!!")
            self.timer.stop()
            self.btn_Show = StopProcess()
            self.btn_Show.show()
            if m == 0:
                if num == 1:
                    cur.execute("UPDATE STOP SET stsp = '0'")
                    cnx.commit()
                    cur.execute("UPDATE STOP SET Motor  = '1'")
                    cnx.commit()
                    cur.execute("UPDATE STOP SET num  = '0'")
                    cnx.commit()
                    print('หยุดขั้นตอนที่1')
            if m == 1:
                if num == 1:
                    cur.execute("UPDATE STOP SET stsp = '0'")
                    cnx.commit()
                    cur.execute("UPDATE STOP SET Motor  = '2'")
                    cnx.commit()
                    print('หยุดขั้นตอนที่2')
            if m == 2:
                if num == 1:    
                    cur.execute("UPDATE STOP SET stsp = '0'")
                    cnx.commit()
                    cur.execute("UPDATE STOP SET Motor  = '3'")
                    cnx.commit()
                    cur.execute("UPDATE STOP SET num  = '0'")
                    cnx.commit()
                    print('หยุดทำขั้นตอน 3')
            if m == 3:
                if num == 1:
                    cur.execute("UPDATE STOP SET stsp = '0'")
                    cnx.commit()
                    cur.execute("UPDATE STOP SET Motor  = '4'")
                    cnx.commit()
                    cur.execute("UPDATE STOP SET num  = '0'")
                    cnx.commit()
                    print('หยุดทำขั้นตอน 3')
            if m == 4:
                if num == 1:
                    cur.execute("UPDATE STOP SET stsp = '0'")
                    cnx.commit()
                    cur.execute("UPDATE STOP SET Motor  = '1'")
                    cnx.commit()
                    cur.execute("UPDATE STOP SET num  = '0'")
                    cnx.commit()
                    print('หยุดทำขั้นตอน 4')
        else:
            msgBox = QtWidgets.QMessageBox()
            msgBox.setWindowTitle("Error")
            msgBox.setText("ไม่พบข้อมูลให้ทำการหยุด")
            msgBox.exec_()
            

    def Cancelbtn(self):    #ยกเลิกกระบวนการทำงาน
        global Table,Check_btn,DataOwner
        Check_btn = "Start"
        print("Cancel !!!")
        valuenow = self.progressbar.value()
        if valuenow > 0:
            '''mycursor = cnx.cursor()
            mycursor.execute("SELECT ID FROM qdataownerpage")
            myresult = mycursor.fetchall()
            ID = myresult [0][:1][0]
            cnx.connect()
            cur.execute("UPDATE loadcell SET berstatus = '4'")
            cur.execute("UPDATE STOP SET stsp = '0'")
            cur.execute("UPDATE STOP SET Motor  = '0'")
            cur.execute("UPDATE STOP SET contro  = '0'")
            cur.execute("UPDATE loadcell SET berstatus = '0'")
            cur.execute("UPDATE loadcell SET sweight = '0'")
            cur.execute("UPDATE loadcell SET kweight = '0'")
            cur.execute("UPDATE loadcell SET outweight = '0'")
            cur.execute("UPDATE STOP SET num  = '0'")
            cur.execute("DELETE FROM qdataownerpage WHERE ID='%s'" % (ID))'''
            cur.execute("UPDATE STOP SET motorst  = '0'")
            cnx.commit()
            print('ยกเลิก')
            self.progressbar.setValue(0)
            self.timer.stop()
            #------Clear Data in label_showQ---#
            self.label_showQ_name.clear()
            self.label_showQ_lastname.clear()
            self.label_showQ_model.clear()
            self.label_showQ_weight.clear()
            #---------------------------------#
            ID_N = DataOwner[0] # ID
            print("orderq_N = ",ID_N)
            cur.execute("DELETE FROM qorderpage WHERE ID='%s'" % (ID_N))
            cnx.commit()
            Ui_MainPage.LoadDataTableQorder(Table)
            DataOwner = []
        else:
            msgBox = QtWidgets.QMessageBox()
            msgBox.setWindowTitle("Error")
            msgBox.setText("ไม่พบข้อมูลให้ทำการยกเลิก")
            msgBox.exec_()

    def InputPrice(self):   #เรียกหน้าต่างราคาเฉาก๊วย
        print("Price")
        self.PriceInput = PriceInput()
        self.PriceInput.show()

    def CallPrice_btn(self):    #เซ็ตราคาไว้โชว์บนปุ่ม
        self.pushButton_Price.setText("ราคา : " + Price_Square + "/" + Price_Wavy)

    def Stockbtn(self):     #เรียกหน้าต่างดูคลังเก็บเฉาก๊วย
        print("Weight")
        self.Stock_Show = Stock_ShowWeight()
        self.Stock_Show.show()

    def InputWeightFixed(self):     #เรียกหน้าปุ่มลัดน้ำหนัก
        print("Select Weight")
        self.WeightFIP = WeightFixedInput()
        self.WeightFIP.show()

    def CallWeightfixedIP(self):        #นำค่าที่เลือกจากปุ่มลัดน้ำหนักเข้าสู่ที่กรอกน้ำหนัก
        global Texts_num,Entryweight
        print(Texts_num)
        Entryweight = Texts_num
        self.lineEdit_wight.setText(Entryweight)
        print(self.lineEdit_wight.text())

    def ContinueProcess(self):      #เมื่อกดทำต่อที่หน้าต่างหยุดสเตตัสบาร์จะทำการเริ่มทำงานต่อ
        
        global SquareW,WavyW,DataOwner
        self.timer.start(1000)      # 1000 millisec = 1 sec
        print("SquareW = ",SquareW,"WavyW = ",WavyW,"DataOwner = ",DataOwner)


class Search_Table(QtWidgets.QDialog):  #ค้นหา
    def __init__(self):
        super(Search_Table, self).__init__()
        self.setWindowModality(Qt.ApplicationModal)
        self.setWindowTitle("Edit Owner")
        self.resize(400, 170)

        font_h = QtGui.QFont()
        font_h.setFamily("TH SarabunPSK")
        font_h.setPointSize(18)
        font_h.setBold(True)

        self.nameLabel = QLabel(self)
        self.nameLabel.setFont(font_h)
        self.nameLabel.setText("กรุณากรอกข้อมูลที่ต้องการค้นหาจากตารางลูกค้าประจำ")
        self.nameLabel.move(20, 15)
        self.nameLabel.resize(500, 30)

        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)

        self.nameOwnerLabel = QLabel(self)
        self.nameOwnerLabel.setFont(font)
        self.nameOwnerLabel.setText("ชื่อ       :")
        self.nameOwnerLabel.move(50, 60)
        self.nameOwnerLabel.resize(500, 30)

        self.lastnameOnwerLabel = QLabel(self)
        self.lastnameOnwerLabel.setFont(font)
        self.lastnameOnwerLabel.setText("นามสกุล :")
        self.lastnameOnwerLabel.move(50, 90)
        self.lastnameOnwerLabel.resize(500, 30)

        # ------------------- Line Edit -------------------#
        centralWidget = QWidget(self)
        self.lineEdit_name = QLineEdit(centralWidget)
        self.lineEdit_name.setGeometry(QRect(120, 65, 230, 20))
        self.lineEdit_name.setFont(font)
        self.lineEdit_name.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.lineEdit_name.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lineEdit_name.setObjectName("lineEdit_name")

        self.lineEdit_lastname = QLineEdit(centralWidget)
        self.lineEdit_lastname.setGeometry(QRect(120, 95, 230, 20))
        self.lineEdit_lastname.setFont(font)
        self.lineEdit_lastname.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.lineEdit_lastname.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lineEdit_lastname.setObjectName("lineEdit_lastname")
        # ------------------------------------------------#

        button = QtWidgets.QPushButton('OK', self)
        button.setToolTip('Confirm')
        button.setFocusPolicy(QtCore.Qt.NoFocus)
        button.move(235, 140)
        button.resize(80, 25)
        button.clicked.connect(self.accept)

        button = QtWidgets.QPushButton('Cancel', self)
        button.setToolTip('Cancel')
        button.setFocusPolicy(QtCore.Qt.NoFocus)
        button.move(315, 140)
        button.resize(80, 25)
        button.clicked.connect(self.reject)

    def accept(self):
        global Texts_N,Texts_L,Table
        print("Ok")
        Texts_N = str(self.lineEdit_name.text())
        Texts_L = str(self.lineEdit_lastname.text())
        Texts = Texts_N + Texts_L

        cnx.connect()
        cur.execute("SELECT * FROM ownerpage ")
        rowtable = cur.fetchall()
        if rowtable != []:
            if Texts != "":
                Ui_MainPage.CallSearch_btn(Table)
                self.close()
            else:
                msgBox = QtWidgets.QMessageBox()
                msgBox.setWindowTitle("Error")
                msgBox.setText("กรุณากรอกข้อมูลก่อนกดค้นหา")
                msgBox.exec_()
        else:
            msgBox = QtWidgets.QMessageBox()
            msgBox.setWindowTitle("Search Error")
            msgBox.setText("ไม่สามารถค้นหาข้อมูลได้เนื่องจากไม่มีข้อมูล")
            msgBox.exec_()

class PriceInput(QtWidgets.QDialog):    #เพิ่มราคาแบบเร่งด่วน
    def __init__(self):
        super(PriceInput, self).__init__()
        self.setWindowModality(Qt.ApplicationModal)
        self.setWindowTitle("Product Price ")
        self.resize(400, 160)       #(400, 200)

        font_h = QtGui.QFont()
        font_h.setFamily("TH SarabunPSK")
        font_h.setPointSize(18)
        font_h.setBold(True)

        self.nameLabel = QLabel(self)
        self.nameLabel.setFont(font_h)
        self.nameLabel.setText("กำหนดราคาของเฉาก๊วยแบบสี่เหลี่ยม และเฉาก๊วยแบบหยัก")
        self.nameLabel.move(15, 15)
        self.nameLabel.resize(500, 30)

        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)

        self.SquareLabel = QLabel(self)
        self.SquareLabel.setFont(font)
        self.SquareLabel.setText("เฉาก๊วยแบบสี่เหลี่ยม :")
        self.SquareLabel.move(30, 60)
        self.SquareLabel.resize(500, 20)

        self.WavyLabel = QLabel(self)
        self.WavyLabel.setFont(font)
        self.WavyLabel.setText("เฉาก๊วยแบบหยัก     :")
        self.WavyLabel.move(30, 90)
        self.WavyLabel.resize(500, 20)

        # ------------------- Line Edit -------------------#
        centralWidget = QWidget(self)
        self.lineEdit_price_square = QLineEdit(centralWidget)
        self.lineEdit_price_square.setGeometry(QRect(160, 60, 150, 20))
        self.lineEdit_price_square.setFont(font)
        self.lineEdit_price_square.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.lineEdit_price_square.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lineEdit_price_square.setObjectName("lineEdit_price_square")
        self.lineEdit_price_square.setText(Price_Square)

        self.lineEdit_price_wavy = QLineEdit(centralWidget)
        self.lineEdit_price_wavy.setGeometry(QRect(160, 90, 150, 20))
        self.lineEdit_price_wavy.setFont(font)
        self.lineEdit_price_wavy.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.lineEdit_price_wavy.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lineEdit_price_wavy.setObjectName("lineEdit_price_wavy")
        self.lineEdit_price_wavy.setText(Price_Wavy)
        # ------------------------------------------------#

        self.SquareLabel_P = QLabel(self)
        self.SquareLabel_P.setFont(font)
        self.SquareLabel_P.setText("บาท/1kg.")
        self.SquareLabel_P.move(320, 60)
        self.SquareLabel_P.resize(500, 20)

        self.WavyLabel_P = QLabel(self)
        self.WavyLabel_P.setFont(font)
        self.WavyLabel_P.setText("บาท/1kg.")
        self.WavyLabel_P.move(320, 90)
        self.WavyLabel_P.resize(500, 20)

        button = QtWidgets.QPushButton('OK', self)
        button.setToolTip('Confirm')
        button.setFocusPolicy(QtCore.Qt.NoFocus)
        button.move(235, 130)               #(235, 170)
        button.resize(80,25)
        button.clicked.connect(self.accept)

        button = QtWidgets.QPushButton('Cancel', self)
        button.setToolTip('Cancel')
        button.setFocusPolicy(QtCore.Qt.NoFocus)
        button.move(315, 130)
        button.resize(80, 25)
        button.clicked.connect(self.reject)

    def accept(self):
        global Table,Price_Square,Price_Wavy
        print("Ok")
        Check_Z = lambda z: "0" if (int(z) + 0) == 0 else str(z)  # เช็ค 0 และ รวม 000 เป็น 0
        Check_NumF1 = lambda n: str(int(n)) if n[0] == "0" else str(n)  # หากมี 0 ข้างหน้าจะทำการลบออก

        Price_Square = self.lineEdit_price_square.text()
        Price_Wavy = self.lineEdit_price_wavy.text()
        if Price_Square != "" and Price_Wavy != "" and Check_Z(Check_NumF1(Price_Square)) != "0" and Check_Z(Check_NumF1(Price_Wavy)) != "0":
            print("Square Price : ", Price_Square, "| Wavy Price : ", Price_Wavy)
            Ui_MainPage.CallPrice_btn(Table)
            self.close()
        elif Price_Square == "" or Price_Wavy == "":
            msgBox = QtWidgets.QMessageBox()
            msgBox.setWindowTitle("Error")
            msgBox.setText("กรุณากรอกราคาให้ครบ")
            msgBox.exec_()
        elif Check_Z(Price_Square) == "0" or Check_Z(Price_Wavy) == "0":
            msgBox = QtWidgets.QMessageBox()
            msgBox.setWindowTitle("Error")
            msgBox.setText("กรุณาอย่ากรอกราคาเป็นเลขศูนย์")
            msgBox.exec_()
        else:
            msgBox = QtWidgets.QMessageBox()
            msgBox.setWindowTitle("Error")
            msgBox.setText("กรุณากรอกราคาให้ครบ")
            msgBox.exec_()

class Stock_ShowWeight(QtWidgets.QDialog):  #โชว์น้ำหนักในคลัง
    def __init__(self):
        super(Stock_ShowWeight, self).__init__()
        self.setWindowModality(Qt.ApplicationModal)
        self.setWindowTitle("Show Weight")
        self.resize(400, 200)
        global Stock_Square,Stock_Wavy,Stock_Salver

        font_h = QtGui.QFont()
        font_h.setFamily("TH SarabunPSK")
        font_h.setPointSize(18)
        font_h.setBold(True)

        self.nameLabel = QLabel(self)
        self.nameLabel.setFont(font_h)
        self.nameLabel.setText("แสดงรายการน้ำหนักที่มีอยู่ในแต่ละส่วนของคลัง")
        self.nameLabel.move(45, 15)
        self.nameLabel.resize(500, 30)

        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)

        self.S_SquareLabel = QLabel(self)
        self.S_SquareLabel.setFont(font)
        self.S_SquareLabel.setText("ถังพักเฉาก๊วยแบบสี่เหลี่ยม :")
        self.S_SquareLabel.move(30, 60)
        self.S_SquareLabel.resize(500, 20)

        self.S_WavyLabel = QLabel(self)
        self.S_WavyLabel.setFont(font)
        self.S_WavyLabel.setText("ถังพักเฉาก๊วยแบบหยัก     :")
        self.S_WavyLabel.move(30, 95)
        self.S_WavyLabel.resize(500, 20)

        self.S_StockLabel = QLabel(self)
        self.S_StockLabel.setFont(font)
        self.S_StockLabel.setText("เฉาก๊วยในถาดชั่งน้ำหนัก   :")
        self.S_StockLabel.move(30, 125)
        self.S_StockLabel.resize(500, 25)

        # ------------------- Line Edit -------------------#
        centralWidget = QWidget(self)
        self.Total_Weight_Sqare = QLabel(centralWidget)
        self.Total_Weight_Sqare.setGeometry(QRect(190, 60, 160, 20))
        self.Total_Weight_Sqare.setFont(font)
        self.Total_Weight_Sqare.setStyleSheet("background-color: rgb(255, 255, 255);border: 1px solid rgb(122, 122, 122);")
        self.Total_Weight_Sqare.setAlignment(QtCore.Qt.AlignCenter)
        self.Total_Weight_Sqare.setObjectName("Total_Weight_Sqare")
        self.Total_Weight_Sqare.setText(Stock_Square)

        self.Total_Weight_Wavy= QLabel(centralWidget)
        self.Total_Weight_Wavy.setGeometry(QRect(190, 95, 160, 20))
        self.Total_Weight_Wavy.setFont(font)
        self.Total_Weight_Wavy.setStyleSheet("background-color: rgb(255, 255, 255);border: 1px solid rgb(122, 122, 122);")
        self.Total_Weight_Wavy.setAlignment(QtCore.Qt.AlignCenter)
        self.Total_Weight_Wavy.setObjectName("Total_Weight_Wavy")
        self.Total_Weight_Wavy.setText(Stock_Wavy)

        self.Total_Weight_Salver= QLabel(centralWidget)
        self.Total_Weight_Salver.setGeometry(QRect(190, 130, 160, 20))
        self.Total_Weight_Salver.setFont(font)
        self.Total_Weight_Salver.setStyleSheet("background-color: rgb(255, 255, 255);border: 1px solid rgb(122, 122, 122);")
        self.Total_Weight_Salver.setAlignment(QtCore.Qt.AlignCenter)
        self.Total_Weight_Salver.setObjectName("Total_Weight_Salver")
        self.Total_Weight_Salver.setText(Stock_Salver)
        # ------------------------------------------------#

        self.SquareLabel_P = QLabel(self)
        self.SquareLabel_P.setFont(font)
        self.SquareLabel_P.setText("kg.")
        self.SquareLabel_P.move(360, 60)
        self.SquareLabel_P.resize(500, 20)

        self.WavyLabel_P = QLabel(self)
        self.WavyLabel_P.setFont(font)
        self.WavyLabel_P.setText("kg.")
        self.WavyLabel_P.move(360, 95)
        self.WavyLabel_P.resize(500, 20)

        self.StockLabel_P = QLabel(self)
        self.StockLabel_P.setFont(font)
        self.StockLabel_P.setText("kg.")
        self.StockLabel_P.move(360, 130)
        self.StockLabel_P.resize(500, 20)

        button = QtWidgets.QPushButton('Cancel', self)
        button.setToolTip('close')
        button.setFocusPolicy(QtCore.Qt.NoFocus)
        button.move(315, 170)
        button.resize(80, 25)
        button.clicked.connect(self.reject)

class WeightFixedInput(QtWidgets.QDialog):     #กำหนดน้ำหนักแบบเร่งด่วน
    def __init__(self):
        super(WeightFixedInput, self).__init__()
        self.setWindowModality(Qt.ApplicationModal)
        self.setWindowTitle("Select Weight")
        self.resize(400, 200)

        font_h = QtGui.QFont()
        font_h.setFamily("TH SarabunPSK")
        font_h.setPointSize(18)
        font_h.setBold(True)

        self.nameLabel = QLabel(self)
        self.nameLabel.setFont(font_h)
        self.nameLabel.setText("กำหนดน้ำหนักแบบเร่งด่วน")
        self.nameLabel.move(100, 15)
        self.nameLabel.resize(500, 30)

        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)

        self.pushButton_one = QtWidgets.QPushButton(self)
        self.pushButton_one.setGeometry(QtCore.QRect(30, 60, 60, 60))
        self.pushButton_one.setFont(font)
        self.pushButton_one.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_one.setStyleSheet(" background-color: rgb(255, 255, 255);color: rgb(37, 84, 255);}")
        self.pushButton_one.setFlat(False)
        self.pushButton_one.setObjectName("pushButton_1")
        self.pushButton_one.setText("5")

        self.pushButton_two = QtWidgets.QPushButton(self)
        self.pushButton_two.setGeometry(QtCore.QRect(120, 60, 60, 60))
        self.pushButton_two.setFont(font)
        self.pushButton_two.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_two.setStyleSheet(" background-color: rgb(255, 255, 255);color: rgb(37, 84, 255);}")
        self.pushButton_two.setFlat(False)
        self.pushButton_two.setObjectName("pushButton_2")
        self.pushButton_two.setText("7")

        self.pushButton_three = QtWidgets.QPushButton(self)
        self.pushButton_three.setGeometry(QtCore.QRect(210, 60, 60, 60))
        self.pushButton_three.setFont(font)
        self.pushButton_three.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_three.setStyleSheet(" background-color: rgb(255, 255, 255);color: rgb(37, 84, 255);}")
        self.pushButton_three.setFlat(False)
        self.pushButton_three.setObjectName("pushButton_3")
        self.pushButton_three.setText("15")

        self.pushButton_four = QtWidgets.QPushButton(self)
        self.pushButton_four.setGeometry(QtCore.QRect(300, 60, 60, 60))
        self.pushButton_four.setFont(font)
        self.pushButton_four.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pushButton_four.setStyleSheet(" background-color: rgb(255, 255, 255);color: rgb(37, 84, 255);}")
        self.pushButton_four.setFlat(False)
        self.pushButton_four.setObjectName("pushButton_4")
        self.pushButton_four.setText("20")

        button = QtWidgets.QPushButton('OK', self)
        button.setToolTip('Confirm')
        button.setFocusPolicy(QtCore.Qt.NoFocus)
        button.move(235, 170)
        button.resize(80,25)
        button.clicked.connect(self.accept)

        button = QtWidgets.QPushButton('Cancel', self)
        button.setToolTip('Cancel')
        button.setFocusPolicy(QtCore.Qt.NoFocus)
        button.move(315, 170)
        button.resize(80, 25)
        button.clicked.connect(self.reject)

        # *----ปุ่มกดเลือกแม่แบบ-----* #
        self.pushButton_one.setCheckable(True)
        self.pushButton_one.setChecked(False)
        self.pushButton_one.clicked.connect(self.one_btn)
        self.pushButton_two.setCheckable(True)
        self.pushButton_two.setChecked(False)
        self.pushButton_two.clicked.connect(self.two_btn)
        self.pushButton_three.setCheckable(True)
        self.pushButton_three.setChecked(False)
        self.pushButton_three.clicked.connect(self.three_btn)
        self.pushButton_four.setCheckable(True)
        self.pushButton_four.setChecked(False)
        self.pushButton_four.clicked.connect(self.four_btn)

    def colorBG_Btn(self):
        self.pushButton_one.setStyleSheet(" background-color: rgb(255, 255, 255);color: rgb(37, 84, 255);}")
        self.pushButton_two.setStyleSheet(" background-color: rgb(255, 255, 255);color: rgb(37, 84, 255);}")
        self.pushButton_three.setStyleSheet(" background-color: rgb(255, 255, 255);color: rgb(37, 84, 255);}")
        self.pushButton_four.setStyleSheet(" background-color: rgb(255, 255, 255);color: rgb(37, 84, 255);}")

    def one_btn(self):
        global Texts_num
        if self.pushButton_one.isChecked() == True:
            self.pushButton_two.setEnabled(False)
            self.pushButton_three.setEnabled(False)
            self.pushButton_four.setEnabled(False)
            self.colorBG_Btn()
            Texts_num = "5"
            print(Texts_num)
        else:
            self.pushButton_two.setEnabled(True)
            self.pushButton_three.setEnabled(True)
            self.pushButton_four.setEnabled(True)

    def two_btn(self):
        global Texts_num
        if self.pushButton_two.isChecked() == True:
            self.pushButton_one.setEnabled(False)
            self.pushButton_three.setEnabled(False)
            self.pushButton_four.setEnabled(False)
            self.colorBG_Btn()
            Texts_num = "7"
            print(Texts_num)
        else:
            self.pushButton_one.setEnabled(True)
            self.pushButton_three.setEnabled(True)
            self.pushButton_four.setEnabled(True)

    def three_btn(self):
        global Texts_num
        if self.pushButton_three.isChecked() == True:
            self.pushButton_one.setEnabled(False)
            self.pushButton_two.setEnabled(False)
            self.pushButton_four.setEnabled(False)
            self.colorBG_Btn()
            Texts_num = "15"
            print(Texts_num)
        else:
            self.pushButton_one.setEnabled(True)
            self.pushButton_two.setEnabled(True)
            self.pushButton_four.setEnabled(True)

    def four_btn(self):
        global Texts_num
        if self.pushButton_four.isChecked() == True:
            self.pushButton_one.setEnabled(False)
            self.pushButton_two.setEnabled(False)
            self.pushButton_three.setEnabled(False)
            self.colorBG_Btn()
            Texts_num = "20"
            print(Texts_num)
        else:
            self.pushButton_one.setEnabled(True)
            self.pushButton_two.setEnabled(True)
            self.pushButton_three.setEnabled(True)

    def accept(self):
        global Table,Texts_num
        print("Ok")
        Ui_MainPage.CallWeightfixedIP(Table)
        self.close()

class StopProcess(QtWidgets.QDialog):       #หน้าต่างหยุดการทำงาน
    def __init__(self):
        super(StopProcess, self).__init__()
        self.setWindowFlag(Qt.FramelessWindowHint)  # ซ่อนแถบ Window Title
        self.setWindowModality(Qt.ApplicationModal)
        self.setWindowTitle("Select Price")
        self.resize(450, 160)

        font_h = QtGui.QFont()
        font_h.setFamily("TH SarabunPSK")
        font_h.setPointSize(18)
        font_h.setBold(True)

        self.nameLabel = QLabel(self)
        self.nameLabel.setFont(font_h)
        self.nameLabel.setText("ตอนนี้รายการคิวออเดอร์ที่กำลังทำถูกสั่งให้หยุดการทำงานอยู่")
        self.nameLabel.move(30, 20)
        self.nameLabel.resize(500, 30)

        self.SquareLabel = QLabel(self)
        self.SquareLabel.setFont(font_h)
        self.SquareLabel.setText("ต้องการทำต่อหรือยกเลิก")
        self.SquareLabel.move(150, 60)
        self.SquareLabel.resize(500, 20)

        font = QtGui.QFont()
        font.setFamily("TH SarabunPSK")
        font.setPointSize(16)
        font.setBold(True)

        Confirm_btn = QtWidgets.QPushButton('ทำต่อ',self)
        Confirm_btn.setFont(font)
        Confirm_btn.setToolTip('Confirm')
        Confirm_btn.setFocusPolicy(QtCore.Qt.NoFocus)
        Confirm_btn.move(15, 110)
        Confirm_btn.resize(200, 35)
        Confirm_btn.setStyleSheet("background-color: rgb(13, 197, 90)")
        Confirm_btn.clicked.connect(self.accept)

        Cancel_btn = QtWidgets.QPushButton('ยกเลิก', self)
        Cancel_btn.setFont(font)
        Cancel_btn.setToolTip('Cancel')
        Cancel_btn.setFocusPolicy(QtCore.Qt.NoFocus)
        Cancel_btn.move(235, 110)
        Cancel_btn.resize(200, 35)  #100
        Cancel_btn.setStyleSheet("background-color: rgb(255, 51, 51)")
        Cancel_btn.clicked.connect(self.cancel)
    
        
    def accept(self):
        global Table
        mycursor = cnx.cursor()
        mycursor.execute("SELECT num FROM STOP")
        myresult = mycursor.fetchall()
        num = myresult [0][:1][0]
        cnx.connect
        mycursor = cnx.cursor()
        mycursor.execute("SELECT Motor FROM STOP")
        myresult = mycursor.fetchall()
        m = myresult [0][:1][0]
        cnx.connect
        if m == 0:
            if num == 0:
                cur.execute("UPDATE STOP SET stsp  = '1'")
                cnx.commit()
                print('ส่ง1')
                cur.execute("UPDATE STOP SET Motor  = '1'")
                cnx.commit()
                print('เริ่มขั้นตอนที่1')
        if m == 1:
            if num == 0:
                cur.execute("UPDATE STOP SET stsp  = '1'")
                cnx.commit()
                print('ส่ง1')
                cur.execute("UPDATE STOP SET Motor  = '1'")
                cnx.commit()
                print('เริ่มขั้นตอนที่2')
        if m == 2:
            if num == 0:
                cur.execute("UPDATE STOP SET stsp  = '1'")
                cnx.commit()
                print('ส่ง1')
                cur.execute("UPDATE STOP SET Motor  = '2'")
                cnx.commit()
                print('เริ่มทำขั้นตอน 3')
        if m == 3:
            if num == 0:
                cur.execute("UPDATE STOP SET stsp  = '1'")
                cnx.commit()
                print('ส่ง1')
                cur.execute("UPDATE STOP SET Motor  = '3'")
                cnx.commit()
                print('เริ่มทำขั้นตอน 3')
        if m == 4:
            if num == 0:
                cur.execute("UPDATE STOP SET stsp  = '1'")
                cnx.commit()
                print('ส่ง1')
                cur.execute("UPDATE STOP SET Motor  = '4'")
                cnx.commit()
                print('เริ่มทำขั้นตอน 4')
        print("Ok")
        Ui_MainPage.ContinueProcess(Table)
        self.close()

    def cancel(self):
        global Table
        print("Cancel")
        Ui_MainPage.Cancelbtn(Table)
        self.close()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainPage = QtWidgets.QMainWindow()
    ui = Ui_MainPage()
    ui.setupUi(MainPage)
    MainPage.show()             #showFullScreen()
    sys.exit(app.exec_())
